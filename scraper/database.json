{
    "CHALLENGES": [
        {
            "id": 0,
            "title": "Two Sum",
            "description": "<p>Given an array of integers <code>nums</code>&nbsp;and an integer <code>target</code>, return <em>indices of the two numbers such that they add up to <code>target</code></em>.</p>\n\n<p>You may assume that each input would have <strong><em>exactly</em> one solution</strong>, and you may not use the <em>same</em> element twice.</p>\n\n<p>You can return the answer in any order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,7,11,15], target = 9\n<strong>Output:</strong> [0,1]\n<strong>Explanation:</strong> Because nums[0] + nums[1] == 9, we return [0, 1].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,4], target = 6\n<strong>Output:</strong> [1,2]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,3], target = 6\n<strong>Output:</strong> [0,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li>\n\t<li><strong>Only one valid answer exists.</strong></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow-up:&nbsp;</strong>Can you come up with an algorithm that is less than <code>O(n<sup>2</sup>)</code><font face=\"monospace\">&nbsp;</font>time complexity?",
            "signature": "def twoSum(self, nums: List[int], target: int) -> List[int]:\n    ",
            "test_cases": [
                "twoSum([2,7,11,15], 9)",
                "twoSum([3,2,4], 6)",
                "twoSum([3,3], 6)",
                "twoSum([1,5,-1,10], 4)",
                "twoSum([-3,4,3,90], 0)",
                "twoSum([0,4,3,0], 0)",
                "twoSum([-1,-2,-3,-4,-5], -8)",
                "twoSum([1,2,5,3,1,9], 8)",
                "twoSum([9,-9,8,1,6], 7)",
                "twoSum([10**9, -10**9, 3, 7], 10)"
            ],
            "expected_outputs": [
                "[0,1]",
                "[1,2]",
                "[0,1]",
                "[0,2]",
                "[0,2]",
                "[0,3]",
                "[2,4]",
                "[2,3]",
                "[2,3]",
                "[2,3]"
            ],
            "compare_func": "sorted(result) == sorted(eval(expected))"
        },
        {
            "id": 1,
            "title": "Palindrome Number",
            "description": "<p>Given an integer <code>x</code>, return <code>true</code><em> if </em><code>x</code><em> is a </em><span data-keyword=\"palindrome-integer\"><em><strong>palindrome</strong></em></span><em>, and </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 121\n<strong>Output:</strong> true\n<strong>Explanation:</strong> 121 reads as 121 from left to right and from right to left.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = -121\n<strong>Output:</strong> false\n<strong>Explanation:</strong> From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 10\n<strong>Output:</strong> false\n<strong>Explanation:</strong> Reads 01 from right to left. Therefore it is not a palindrome.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup>&nbsp;&lt;= x &lt;= 2<sup>31</sup>&nbsp;- 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you solve it without converting the integer to a string?",
            "signature": "def isPalindrome(self, x: int) -> bool:\n    ",
            "test_cases": [
                "isPalindrome(0)",
                "isPalindrome(1)",
                "isPalindrome(11)",
                "isPalindrome(-1)",
                "isPalindrome(-101)",
                "isPalindrome(1001)",
                "isPalindrome(12321)",
                "isPalindrome(123321)",
                "isPalindrome(123456)",
                "isPalindrome(-2147483648)"
            ],
            "expected_outputs": [
                "true",
                "true",
                "true",
                "false",
                "false",
                "true",
                "true",
                "true",
                "false",
                "false"
            ],
            "compare_func": "str(result).lower() == expected"
        },
        {
            "id": 2,
            "title": "Longest Common Prefix",
            "description": "<p>Write a function to find the longest common prefix string amongst an array of strings.</p>\n\n<p>If there is no common prefix, return an empty string <code>&quot;&quot;</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> strs = [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]\n<strong>Output:</strong> &quot;fl&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> strs = [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]\n<strong>Output:</strong> &quot;&quot;\n<strong>Explanation:</strong> There is no common prefix among the input strings.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= strs.length &lt;= 200</code></li>\n\t<li><code>0 &lt;= strs[i].length &lt;= 200</code></li>\n\t<li><code>strs[i]</code> consists of only lowercase English letters.</li>\n</ul>\n",
            "signature": "def longestCommonPrefix(self, strs: List[str]) -> str:\n    ",
            "test_cases": [
                "longestCommonPrefix(['flower', 'flow', 'flight'])",
                "longestCommonPrefix(['dog', 'racecar', 'car'])",
                "longestCommonPrefix(['interspecies', 'interstellar', 'interstate'])",
                "longestCommonPrefix([''])",
                "longestCommonPrefix(['abc'])",
                "longestCommonPrefix(['abcd', 'abcd', 'abcd'])",
                "longestCommonPrefix(['prefix', 'pref', 'preference', 'prelude'])",
                "longestCommonPrefix(['prefix', '', 'preference'])",
                "longestCommonPrefix(['same', 'same'])",
                "longestCommonPrefix(['a' * 200, 'a' * 199])"
            ],
            "expected_outputs": [
                "\"fl\"",
                "\"\"",
                "\"inters\"",
                "\"\"",
                "\"abc\"",
                "\"abcd\"",
                "\"pre\"",
                "\"\"",
                "\"same\"",
                "\"a\" * 199"
            ],
            "compare_func": "result == expected"
        },
        {
            "id": 3,
            "title": "Valid Parentheses",
            "description": "<p>Given a string <code>s</code> containing just the characters <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;{&#39;</code>, <code>&#39;}&#39;</code>, <code>&#39;[&#39;</code> and <code>&#39;]&#39;</code>, determine if the input string is valid.</p>\n\n<p>An input string is valid if:</p>\n\n<ol>\n\t<li>Open brackets must be closed by the same type of brackets.</li>\n\t<li>Open brackets must be closed in the correct order.</li>\n\t<li>Every close bracket has a corresponding open bracket of the same type.</li>\n</ol>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;()&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;()[]{}&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;(]&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n</div>\n\n<p><strong class=\"example\">Example 4:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;([])&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of parentheses only <code>&#39;()[]{}&#39;</code>.</li>\n</ul>\n",
            "signature": "def isValid(self, s: str) -> bool:\n    ",
            "test_cases": [
                "isValid('()')",
                "isValid('()[]{}')",
                "isValid('(]')",
                "isValid('([])')",
                "isValid('([{}])')",
                "isValid('[')",
                "isValid('{[()]}')",
                "isValid('{[(])}')",
                "isValid('{{{{{}}}}}')",
                "isValid('')"
            ],
            "expected_outputs": [
                "true",
                "true",
                "false",
                "true",
                "true",
                "false",
                "true",
                "false",
                "true",
                "true"
            ],
            "compare_func": "result == (expected == 'true')"
        },
        {
            "id": 4,
            "title": "Remove Duplicates from Sorted Array",
            "description": "<p>Given an integer array <code>nums</code> sorted in <strong>non-decreasing order</strong>, remove the duplicates <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\"><strong>in-place</strong></a> such that each unique element appears only <strong>once</strong>. The <strong>relative order</strong> of the elements should be kept the <strong>same</strong>. Then return <em>the number of unique elements in </em><code>nums</code>.</p>\n\n<p>Consider the number of unique elements of <code>nums</code> to be <code>k</code>, to get accepted, you need to do the following things:</p>\n\n<ul>\n\t<li>Change the array <code>nums</code> such that the first <code>k</code> elements of <code>nums</code> contain the unique elements in the order they were present in <code>nums</code> initially. The remaining elements of <code>nums</code> are not important as well as the size of <code>nums</code>.</li>\n\t<li>Return <code>k</code>.</li>\n</ul>\n\n<p><strong>Custom Judge:</strong></p>\n\n<p>The judge will test your solution with the following code:</p>\n\n<pre>\nint[] nums = [...]; // Input array\nint[] expectedNums = [...]; // The expected answer with correct length\n\nint k = removeDuplicates(nums); // Calls your implementation\n\nassert k == expectedNums.length;\nfor (int i = 0; i &lt; k; i++) {\n    assert nums[i] == expectedNums[i];\n}\n</pre>\n\n<p>If all assertions pass, then your solution will be <strong>accepted</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,2]\n<strong>Output:</strong> 2, nums = [1,2,_]\n<strong>Explanation:</strong> Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,0,1,1,1,2,2,3,3,4]\n<strong>Output:</strong> 5, nums = [0,1,2,3,4,_,_,_,_,_]\n<strong>Explanation:</strong> Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>-100 &lt;= nums[i] &lt;= 100</code></li>\n\t<li><code>nums</code> is sorted in <strong>non-decreasing</strong> order.</li>\n</ul>\n",
            "signature": "def removeDuplicates(self, nums: List[int]) -> int:\n    ",
            "test_cases": [
                "removeDuplicates([1,1,2])",
                "removeDuplicates([0,0,1,1,1,2,2,3,3,4])",
                "removeDuplicates([1,2,3,4,5])",
                "removeDuplicates([1,1,1,1,1,1])",
                "removeDuplicates([-2,-1,0,0,1,2,2,3])",
                "removeDuplicates([-3,-3,-2,-2,-1,-1,0,0,1,1])",
                "removeDuplicates([100])",
                "removeDuplicates([0,0])",
                "removeDuplicates([1,1,1,2,2,3,3,4,5,5,5,5,6,7,8,8,9,10,10,11,12,13,14,15,15])",
                "removeDuplicates([])"
            ],
            "expected_outputs": [
                "2, [1,2]",
                "5, [0,1,2,3,4]",
                "5, [1,2,3,4,5]",
                "1, [1]",
                "6, [-2,-1,0,1,2,3]",
                "5, [-3,-2,-1,0,1]",
                "1, [100]",
                "1, [0]",
                "15, [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
                "0, []"
            ],
            "compare_func": "result == int(expected.split(',')[0]) and all(nums[i] == int(expected.split(',')[1].strip()[1:-1].split(',')[i]) for i in range(int(expected.split(',')[0])))"
        },
        {
            "id": 5,
            "title": "Remove Element",
            "description": "<p>Given an integer array <code>nums</code> and an integer <code>val</code>, remove all occurrences of <code>val</code> in <code>nums</code> <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\"><strong>in-place</strong></a>. The order of the elements may be changed. Then return <em>the number of elements in </em><code>nums</code><em> which are not equal to </em><code>val</code>.</p>\n\n<p>Consider the number of elements in <code>nums</code> which are not equal to <code>val</code> be <code>k</code>, to get accepted, you need to do the following things:</p>\n\n<ul>\n\t<li>Change the array <code>nums</code> such that the first <code>k</code> elements of <code>nums</code> contain the elements which are not equal to <code>val</code>. The remaining elements of <code>nums</code> are not important as well as the size of <code>nums</code>.</li>\n\t<li>Return <code>k</code>.</li>\n</ul>\n\n<p><strong>Custom Judge:</strong></p>\n\n<p>The judge will test your solution with the following code:</p>\n\n<pre>\nint[] nums = [...]; // Input array\nint val = ...; // Value to remove\nint[] expectedNums = [...]; // The expected answer with correct length.\n                            // It is sorted with no values equaling val.\n\nint k = removeElement(nums, val); // Calls your implementation\n\nassert k == expectedNums.length;\nsort(nums, 0, k); // Sort the first k elements of nums\nfor (int i = 0; i &lt; actualLength; i++) {\n    assert nums[i] == expectedNums[i];\n}\n</pre>\n\n<p>If all assertions pass, then your solution will be <strong>accepted</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,2,3], val = 3\n<strong>Output:</strong> 2, nums = [2,2,_,_]\n<strong>Explanation:</strong> Your function should return k = 2, with the first two elements of nums being 2.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,2,2,3,0,4,2], val = 2\n<strong>Output:</strong> 5, nums = [0,1,4,0,3,_,_,_]\n<strong>Explanation:</strong> Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.\nNote that the five elements can be returned in any order.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 50</code></li>\n\t<li><code>0 &lt;= val &lt;= 100</code></li>\n</ul>\n",
            "signature": "def removeElement(self, nums: List[int], val: int) -> int:\n    ",
            "test_cases": [
                "removeElement([3,2,2,3], 3)",
                "removeElement([0,1,2,2,3,0,4,2], 2)",
                "removeElement([1,1,1,1], 1)",
                "removeElement([1,2,3,4,5], 6)",
                "removeElement([], 1)",
                "removeElement([0,0,0,0], 0)",
                "removeElement([50,1,50,2,50,3], 50)",
                "removeElement([1,2,3,4,5,6,7,8,9,10], 5)",
                "removeElement([5,5,5,5,5], 5)",
                "removeElement([3,1,4,1,5,9,2,6,5,3,5], 5)"
            ],
            "expected_outputs": [
                "2, [2,2]",
                "5, [0,0,1,3,4]",
                "0, []",
                "5, [1,2,3,4,5]",
                "0, []",
                "0, []",
                "3, [1,2,3]",
                "9, [1,2,3,4,6,7,8,9,10]",
                "0, []",
                "8, [3,1,4,1,9,2,6,3]"
            ],
            "compare_func": "result == int(expected.split(',')[0]) and sorted(nums[:result]) == sorted(eval(expected.split(',')[1]))"
        },
        {
            "id": 6,
            "title": "Find the Index of the First Occurrence in a String",
            "description": "<p>Given two strings <code>needle</code> and <code>haystack</code>, return the index of the first occurrence of <code>needle</code> in <code>haystack</code>, or <code>-1</code> if <code>needle</code> is not part of <code>haystack</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> haystack = &quot;sadbutsad&quot;, needle = &quot;sad&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> &quot;sad&quot; occurs at index 0 and 6.\nThe first occurrence is at index 0, so we return 0.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> haystack = &quot;leetcode&quot;, needle = &quot;leeto&quot;\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> &quot;leeto&quot; did not occur in &quot;leetcode&quot;, so we return -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= haystack.length, needle.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>haystack</code> and <code>needle</code> consist of only lowercase English characters.</li>\n</ul>\n",
            "signature": "def strStr(self, haystack: str, needle: str) -> int:\n    ",
            "test_cases": [
                "self.strStr('sadbutsad', 'sad')",
                "self.strStr('leetcode', 'leeto')",
                "self.strStr('hello', 'll')",
                "self.strStr('aaaaa', 'bba')",
                "self.strStr('abracadabra', 'abra')",
                "self.strStr('mississippi', 'issip')",
                "self.strStr('aaaaa', '')",
                "self.strStr('a', 'a')",
                "self.strStr('mississippi', 'issipi')",
                "self.strStr('ababababab', 'ababab')"
            ],
            "expected_outputs": [
                "0",
                "-1",
                "2",
                "-1",
                "0",
                "4",
                "0",
                "0",
                "-1",
                "0"
            ],
            "compare_func": "result == int(expected)"
        },
        {
            "id": 7,
            "title": "Search Insert Position",
            "description": "<p>Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p>\n\n<p>You must&nbsp;write an algorithm with&nbsp;<code>O(log n)</code> runtime complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,5,6], target = 5\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,5,6], target = 2\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,5,6], target = 7\n<strong>Output:</strong> 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>nums</code> contains <strong>distinct</strong> values sorted in <strong>ascending</strong> order.</li>\n\t<li><code>-10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "signature": "def searchInsert(self, nums: List[int], target: int) -> int:\n    ",
            "test_cases": [
                "searchInsert([1,3,5,6], 5)",
                "searchInsert([1,3,5,6], 2)",
                "searchInsert([1,3,5,6], 7)",
                "searchInsert([1,3,5,6], 0)",
                "searchInsert([1], 1)",
                "searchInsert([1,3,5,7,9,11], 8)",
                "searchInsert([-10,-5,0,3,5,9], -6)",
                "searchInsert([-10,0,10,20,30], 15)",
                "searchInsert([-4,-3,-2,-1], -5)",
                "searchInsert([1,2,3,4,5], 6)"
            ],
            "expected_outputs": [
                "2",
                "1",
                "4",
                "0",
                "0",
                "4",
                "1",
                "3",
                "0",
                "5"
            ],
            "compare_func": "result == int(expected)"
        },
        {
            "id": 8,
            "title": "Length of Last Word",
            "description": "<p>Given a string <code>s</code> consisting of words and spaces, return <em>the length of the <strong>last</strong> word in the string.</em></p>\n\n<p>A <strong>word</strong> is a maximal <span data-keyword=\"substring-nonempty\">substring</span> consisting of non-space characters only.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;Hello World&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The last word is &quot;World&quot; with length 5.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;   fly me   to   the moon  &quot;\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The last word is &quot;moon&quot; with length 4.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;luffy is still joyboy&quot;\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The last word is &quot;joyboy&quot; with length 6.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of only English letters and spaces <code>&#39; &#39;</code>.</li>\n\t<li>There will be at least one word in <code>s</code>.</li>\n</ul>\n",
            "signature": "def lengthOfLastWord(self, s: str) -> int:\n    ",
            "test_cases": [
                "lengthOfLastWord('Hello World')",
                "lengthOfLastWord('   fly me   to   the moon  ')",
                "lengthOfLastWord('luffy is still joyboy')",
                "lengthOfLastWord('single')",
                "lengthOfLastWord('a b c d e ')",
                "lengthOfLastWord('a    ')",
                "lengthOfLastWord('   quick brown   fox  ')",
                "lengthOfLastWord('a b c     ')",
                "lengthOfLastWord(' z ')",
                "lengthOfLastWord('          multiple     spaces   ')"
            ],
            "expected_outputs": [
                "5",
                "4",
                "6",
                "6",
                "1",
                "1",
                "3",
                "1",
                "1",
                "6"
            ],
            "compare_func": "result == int(expected)"
        },
        {
            "id": 9,
            "title": "Plus One",
            "description": "<p>You are given a <strong>large integer</strong> represented as an integer array <code>digits</code>, where each <code>digits[i]</code> is the <code>i<sup>th</sup></code> digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading <code>0</code>&#39;s.</p>\n\n<p>Increment the large integer by one and return <em>the resulting array of digits</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = [1,2,3]\n<strong>Output:</strong> [1,2,4]\n<strong>Explanation:</strong> The array represents the integer 123.\nIncrementing by one gives 123 + 1 = 124.\nThus, the result should be [1,2,4].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = [4,3,2,1]\n<strong>Output:</strong> [4,3,2,2]\n<strong>Explanation:</strong> The array represents the integer 4321.\nIncrementing by one gives 4321 + 1 = 4322.\nThus, the result should be [4,3,2,2].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = [9]\n<strong>Output:</strong> [1,0]\n<strong>Explanation:</strong> The array represents the integer 9.\nIncrementing by one gives 9 + 1 = 10.\nThus, the result should be [1,0].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= digits.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= digits[i] &lt;= 9</code></li>\n\t<li><code>digits</code> does not contain any leading <code>0</code>&#39;s.</li>\n</ul>\n",
            "signature": "def plusOne(self, digits: List[int]) -> List[int]:\n    ",
            "test_cases": [
                "plusOne([1,2,3])",
                "plusOne([4,3,2,1])",
                "plusOne([9])",
                "plusOne([9,9])",
                "plusOne([1,0,0,0,0])",
                "plusOne([0,9,9,9,9])",
                "plusOne([8,9,9,9])",
                "plusOne([2,4,9,9,9])",
                "plusOne([7,9,8,5])",
                "plusOne([5,7,9,9,9,9,9,8])"
            ],
            "expected_outputs": [
                "[1,2,4]",
                "[4,3,2,2]",
                "[1,0]",
                "[1,0,0]",
                "[1,0,0,0,1]",
                "[1,0,0,0,0]",
                "[9,0,0,0]",
                "[2,5,0,0,0]",
                "[7,9,8,6]",
                "[5,8,0,0,0,0,0,9]"
            ],
            "compare_func": "result == eval(expected)"
        },
        {
            "id": 10,
            "title": "Add Binary",
            "description": "<p>Given two binary strings <code>a</code> and <code>b</code>, return <em>their sum as a binary string</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> a = \"11\", b = \"1\"\n<strong>Output:</strong> \"100\"\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> a = \"1010\", b = \"1011\"\n<strong>Output:</strong> \"10101\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= a.length, b.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>a</code> and <code>b</code> consist&nbsp;only of <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code> characters.</li>\n\t<li>Each string does not contain leading zeros except for the zero itself.</li>\n</ul>\n",
            "signature": "def addBinary(self, a: str, b: str) -> str:\n    ",
            "test_cases": [
                "addBinary(\"11\", \"1\")",
                "addBinary(\"1010\", \"1011\")",
                "addBinary(\"0\", \"0\")",
                "addBinary(\"1\", \"0\")",
                "addBinary(\"0\", \"1\")",
                "addBinary(\"1111\", \"1111\")",
                "addBinary(\"10000000000\", \"10000000000\")",
                "addBinary(\"1111111111111\", \"1\")",
                "addBinary(\"1010101010101010\", \"0101010101010101\")",
                "addBinary(\"11111111111111111111111111111111\", \"0\")"
            ],
            "expected_outputs": [
                "\"100\"",
                "\"10101\"",
                "\"0\"",
                "\"1\"",
                "\"1\"",
                "\"11110\"",
                "\"100000000000\"",
                "\"10000000000000\"",
                "\"1111111111111111\"",
                "\"11111111111111111111111111111111\""
            ],
            "compare_func": "result == expected"
        },
        {
            "id": 11,
            "title": "Climbing Stairs",
            "description": "<p>You are climbing a staircase. It takes <code>n</code> steps to reach the top.</p>\n\n<p>Each time you can either climb <code>1</code> or <code>2</code> steps. In how many distinct ways can you climb to the top?</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 45</code></li>\n</ul>\n",
            "signature": "def climbStairs(self, n: int) -> int:\n    ",
            "test_cases": [
                "climbStairs(1)",
                "climbStairs(2)",
                "climbStairs(3)",
                "climbStairs(4)",
                "climbStairs(5)",
                "climbStairs(10)",
                "climbStairs(20)",
                "climbStairs(30)",
                "climbStairs(44)",
                "climbStairs(45)"
            ],
            "expected_outputs": [
                "1",
                "2",
                "3",
                "5",
                "8",
                "89",
                "10946",
                "1346269",
                "1134903170",
                "1836311903"
            ],
            "compare_func": "result == int(expected)"
        },
        {
            "id": 12,
            "title": "Remove Duplicates from Sorted List",
            "description": "<p>Given the <code>head</code> of a sorted linked list, <em>delete all duplicates such that each element appears only once</em>. Return <em>the linked list <strong>sorted</strong> as well</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/04/list1.jpg\" style=\"width: 302px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> head = [1,1,2]\n<strong>Output:</strong> [1,2]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/04/list2.jpg\" style=\"width: 542px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,1,2,3,3]\n<strong>Output:</strong> [1,2,3]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is in the range <code>[0, 300]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n\t<li>The list is guaranteed to be <strong>sorted</strong> in ascending order.</li>\n</ul>\n",
            "signature": "ass ListNode:\n  def __init__(self, val=0, next=None):\n      self.val = val\n      self.next = next\ns Solution:\ndef deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n    ",
            "test_cases": [
                "deleteDuplicates(ListNode(1, ListNode(1, ListNode(2))))",
                "deleteDuplicates(ListNode(1, ListNode(1, ListNode(2, ListNode(3, ListNode(3))))))",
                "deleteDuplicates(ListNode(1, ListNode(2, ListNode(2, ListNode(3, ListNode(3, ListNode(3)))))))",
                "deleteDuplicates(ListNode(1))",
                "deleteDuplicates(None)",
                "deleteDuplicates(ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5))))))",
                "deleteDuplicates(ListNode(-100, ListNode(-100, ListNode(-99, ListNode(-98, ListNode(-97))))))",
                "deleteDuplicates(ListNode(0, ListNode(0, ListNode(0))))",
                "deleteDuplicates(ListNode(1, ListNode(1, ListNode(1, ListNode(1, ListNode(1))))))",
                "deleteDuplicates(ListNode(-1, ListNode(0, ListNode(0, ListNode(0, ListNode(1, ListNode(2)))))))"
            ],
            "expected_outputs": [
                "[1, 2]",
                "[1, 2, 3]",
                "[1, 2, 3]",
                "[1]",
                "[]",
                "[1, 2, 3, 4, 5]",
                "[-100, -99, -98, -97]",
                "[0]",
                "[1]",
                "[-1, 0, 1, 2]"
            ],
            "compare_func": "list_to_string(result) == expected.strip()"
        },
        {
            "id": 13,
            "title": "Merge Sorted Array",
            "description": "<p>You are given two integer arrays <code>nums1</code> and <code>nums2</code>, sorted in <strong>non-decreasing order</strong>, and two integers <code>m</code> and <code>n</code>, representing the number of elements in <code>nums1</code> and <code>nums2</code> respectively.</p>\n\n<p><strong>Merge</strong> <code>nums1</code> and <code>nums2</code> into a single array sorted in <strong>non-decreasing order</strong>.</p>\n\n<p>The final sorted array should not be returned by the function, but instead be <em>stored inside the array </em><code>nums1</code>. To accommodate this, <code>nums1</code> has a length of <code>m + n</code>, where the first <code>m</code> elements denote the elements that should be merged, and the last <code>n</code> elements are set to <code>0</code> and should be ignored. <code>nums2</code> has a length of <code>n</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\n<strong>Output:</strong> [1,2,2,3,5,6]\n<strong>Explanation:</strong> The arrays we are merging are [1,2,3] and [2,5,6].\nThe result of the merge is [<u>1</u>,<u>2</u>,2,<u>3</u>,5,6] with the underlined elements coming from nums1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1], m = 1, nums2 = [], n = 0\n<strong>Output:</strong> [1]\n<strong>Explanation:</strong> The arrays we are merging are [1] and [].\nThe result of the merge is [1].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [0], m = 0, nums2 = [1], n = 1\n<strong>Output:</strong> [1]\n<strong>Explanation:</strong> The arrays we are merging are [] and [1].\nThe result of the merge is [1].\nNote that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>nums1.length == m + n</code></li>\n\t<li><code>nums2.length == n</code></li>\n\t<li><code>0 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>1 &lt;= m + n &lt;= 200</code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums1[i], nums2[j] &lt;= 10<sup>9</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up: </strong>Can you come up with an algorithm that runs in <code>O(m + n)</code> time?</p>\n",
            "signature": "def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:\n    \"\"\"\n    Do not return anything, modify nums1 in-place instead.\n    \"\"\"\n    ",
            "test_cases": [
                "merge([1,2,3,0,0,0], 3, [2,5,6], 3)",
                "merge([1], 1, [], 0)",
                "merge([0], 0, [1], 1)",
                "merge([4,5,6,0,0,0], 3, [1,2,3], 3)",
                "merge([2,0], 1, [1], 1)",
                "merge([0,0,0], 0, [2,2,2], 3)",
                "merge([-1,0,1,0,0], 3, [-3,-2], 2)",
                "merge([10,20,30,0,0,0,0], 3, [5,15,25,35], 4)",
                "merge([-10,0,10,0,0,0], 3, [-5,5,15], 3)",
                "merge([1,3,5,7,0,0,0,0], 4, [2,4,6,8], 4)"
            ],
            "expected_outputs": [
                "[1,2,2,3,5,6]",
                "[1]",
                "[1]",
                "[1,2,3,4,5,6]",
                "[1,2]",
                "[2,2,2]",
                "[-3,-2,-1,0,1]",
                "[5,10,15,20,25,30,35]",
                "[-10,-5,0,5,10,15]",
                "[1,2,3,4,5,6,7,8]"
            ],
            "compare_func": "result == eval(expected)"
        },
        {
            "id": 14,
            "title": "Symmetric Tree",
            "description": "<p>Given the <code>root</code> of a binary tree, <em>check whether it is a mirror of itself</em> (i.e., symmetric around its center).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/19/symtree1.jpg\" style=\"width: 354px; height: 291px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,2,3,4,4,3]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/19/symtree2.jpg\" style=\"width: 308px; height: 258px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,2,null,3,null,3]\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 1000]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you solve it both recursively and iteratively?",
            "signature": "ass TreeNode:\n  def __init__(self, val=0, left=None, right=None):\n      self.val = val\n      self.left = left\n      self.right = right\ns Solution:\ndef isSymmetric(self, root: Optional[TreeNode]) -> bool:\n    ",
            "test_cases": [
                "isSymmetric(TreeNode(1, TreeNode(2, TreeNode(3), TreeNode(4)), TreeNode(2, TreeNode(4), TreeNode(3))))",
                "isSymmetric(TreeNode(1, TreeNode(2, None, TreeNode(3)), TreeNode(2, None, TreeNode(3))))",
                "isSymmetric(TreeNode(1))",
                "isSymmetric(TreeNode(1, TreeNode(2), TreeNode(2)))",
                "isSymmetric(TreeNode(1, TreeNode(2, TreeNode(3), None), TreeNode(2, None, TreeNode(3))))",
                "isSymmetric(TreeNode(1, TreeNode(2, TreeNode(3), TreeNode(4)), TreeNode(2, TreeNode(3), TreeNode(4))))",
                "isSymmetric(TreeNode(1, TreeNode(2, TreeNode(3), TreeNode(4)), TreeNode(2, TreeNode(4), TreeNode(3)))))",
                "isSymmetric(TreeNode(1, TreeNode(2, TreeNode(3)), TreeNode(2, TreeNode(3))))",
                "isSymmetric(TreeNode(1, TreeNode(2, TreeNode(3), None), TreeNode(2, None, TreeNode(4))))",
                "isSymmetric(TreeNode(1, TreeNode(2, TreeNode(3), TreeNode(4)), TreeNode(2, TreeNode(4), TreeNode(3)))))"
            ],
            "expected_outputs": [
                "true",
                "false",
                "true",
                "true",
                "false",
                "false",
                "true",
                "false",
                "false",
                "true"
            ],
            "compare_func": "result == (expected.lower() == 'true')"
        },
        {
            "id": 15,
            "title": "Balanced Binary Tree",
            "description": "<p>Given a binary tree, determine if it is <span data-keyword=\"height-balanced\"><strong>height-balanced</strong></span>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/06/balance_1.jpg\" style=\"width: 342px; height: 221px;\" />\n<pre>\n<strong>Input:</strong> root = [3,9,20,null,null,15,7]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/06/balance_2.jpg\" style=\"width: 452px; height: 301px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,2,3,3,null,null,4,4]\n<strong>Output:</strong> false\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 5000]</code>.</li>\n\t<li><code>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "signature": "ass TreeNode:\n  def __init__(self, val=0, left=None, right=None):\n      self.val = val\n      self.left = left\n      self.right = right\ns Solution:\ndef isBalanced(self, root: Optional[TreeNode]) -> bool:\n    ",
            "test_cases": [
                "isBalanced(TreeNode(3, TreeNode(9), TreeNode(20, TreeNode(15), TreeNode(7))))",
                "isBalanced(TreeNode(1, TreeNode(2, TreeNode(3, TreeNode(4), TreeNode(4))), TreeNode(2)))",
                "isBalanced(None)",
                "isBalanced(TreeNode(10))",
                "isBalanced(TreeNode(1, TreeNode(2, TreeNode(3, TreeNode(4), None), TreeNode(3)), TreeNode(2)))",
                "isBalanced(TreeNode(1, TreeNode(2, TreeNode(3)), TreeNode(2)))",
                "isBalanced(TreeNode(-1, TreeNode(-2), TreeNode(-3, TreeNode(-4), TreeNode(-5))))",
                "isBalanced(TreeNode(1, TreeNode(2, TreeNode(3, TreeNode(4), TreeNode(5)), TreeNode(3)), TreeNode(2, TreeNode(3), TreeNode(3))))",
                "isBalanced(TreeNode(1, TreeNode(2, TreeNode(4, TreeNode(8, TreeNode(16)))), TreeNode(3)))",
                "isBalanced(TreeNode(1, TreeNode(2, TreeNode(3, TreeNode(4)), TreeNode(5)), TreeNode(6, None, TreeNode(7))))"
            ],
            "expected_outputs": [
                "true",
                "false",
                "true",
                "true",
                "false",
                "false",
                "false",
                "true",
                "false",
                "true"
            ],
            "compare_func": "result == (expected == 'true')"
        },
        {
            "id": 16,
            "title": "Minimum Depth of Binary Tree",
            "description": "<p>Given a binary tree, find its minimum depth.</p>\n\n<p>The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.</p>\n\n<p><strong>Note:</strong>&nbsp;A leaf is a node with no children.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/12/ex_depth.jpg\" style=\"width: 432px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [3,9,20,null,null,15,7]\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [2,null,3,null,4,null,5,null,6]\n<strong>Output:</strong> 5\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 10<sup>5</sup>]</code>.</li>\n\t<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n",
            "signature": "ass TreeNode:\n  def __init__(self, val=0, left=None, right=None):\n      self.val = val\n      self.left = left\n      self.right = right\ns Solution:\ndef minDepth(self, root: Optional[TreeNode]) -> int:\n    ",
            "test_cases": [
                "minDepth(None)",
                "minDepth(TreeNode(1))",
                "minDepth(TreeNode(1, TreeNode(2)))",
                "minDepth(TreeNode(1, TreeNode(2, TreeNode(3), TreeNode(4)), TreeNode(5)))",
                "minDepth(TreeNode(1, None, TreeNode(2, None, TreeNode(3))))",
                "minDepth(TreeNode(1, TreeNode(2, TreeNode(3, TreeNode(4, TreeNode(5))))))",
                "minDepth(TreeNode(1, TreeNode(2, TreeNode(4)), TreeNode(3)))",
                "minDepth(TreeNode(1, TreeNode(2, TreeNode(4, TreeNode(5)), TreeNode(3))))",
                "minDepth(TreeNode(1, TreeNode(2, None, TreeNode(3, None, TreeNode(4, None, TreeNode(5, None, TreeNode(6)))))))",
                "minDepth(TreeNode(1, TreeNode(2), TreeNode(3, TreeNode(4), TreeNode(5, TreeNode(6), TreeNode(7)))))"
            ],
            "expected_outputs": [
                "0",
                "1",
                "2",
                "2",
                "3",
                "5",
                "2",
                "3",
                "6",
                "2"
            ],
            "compare_func": "result == int(expected)"
        },
        {
            "id": 17,
            "title": "Path Sum",
            "description": "<p>Given the <code>root</code> of a binary tree and an integer <code>targetSum</code>, return <code>true</code> if the tree has a <strong>root-to-leaf</strong> path such that adding up all the values along the path equals <code>targetSum</code>.</p>\n\n<p>A <strong>leaf</strong> is a node with no children.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/18/pathsum1.jpg\" style=\"width: 500px; height: 356px;\" />\n<pre>\n<strong>Input:</strong> root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The root-to-leaf path with the target sum is shown.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/18/pathsum2.jpg\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3], targetSum = 5\n<strong>Output:</strong> false\n<strong>Explanation:</strong> There are two root-to-leaf paths in the tree:\n(1 --&gt; 2): The sum is 3.\n(1 --&gt; 3): The sum is 4.\nThere is no root-to-leaf path with sum = 5.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [], targetSum = 0\n<strong>Output:</strong> false\n<strong>Explanation:</strong> Since the tree is empty, there are no root-to-leaf paths.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 5000]</code>.</li>\n\t<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n\t<li><code>-1000 &lt;= targetSum &lt;= 1000</code></li>\n</ul>\n",
            "signature": "ass TreeNode:\n  def __init__(self, val=0, left=None, right=None):\n      self.val = val\n      self.left = left\n      self.right = right\ns Solution:\ndef hasPathSum(self, root: Optional[TreeNode], targetSum: int) -> bool:\n    ",
            "test_cases": [
                "hasPathSum(TreeNode(5, TreeNode(4, TreeNode(11, TreeNode(7), TreeNode(2))), TreeNode(8, TreeNode(13), TreeNode(4, right=TreeNode(1)))), 22)",
                "hasPathSum(TreeNode(1, TreeNode(2), TreeNode(3)), 5)",
                "hasPathSum(None, 0)",
                "hasPathSum(TreeNode(1, TreeNode(2)), 1)",
                "hasPathSum(TreeNode(-2, right=TreeNode(-3)), -5)",
                "hasPathSum(TreeNode(1, right=TreeNode(2, right=TreeNode(3))), 6)",
                "hasPathSum(TreeNode(1, TreeNode(2), TreeNode(3)), 4)",
                "hasPathSum(TreeNode(5, TreeNode(4, TreeNode(11, TreeNode(7), TreeNode(2))), TreeNode(8, TreeNode(13), TreeNode(4, right=TreeNode(1)))), 27)",
                "hasPathSum(TreeNode(1, TreeNode(-2, TreeNode(1, TreeNode(-1)), TreeNode(3)), TreeNode(-3, TreeNode(-2))), -1)",
                "hasPathSum(TreeNode(1), 1)"
            ],
            "expected_outputs": [
                "true",
                "false",
                "false",
                "false",
                "true",
                "true",
                "true",
                "false",
                "true",
                "true"
            ],
            "compare_func": "result == (expected == 'true')"
        },
        {
            "id": 18,
            "title": "Best Time to Buy and Sell Stock",
            "description": "<p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>i<sup>th</sup></code> day.</p>\n\n<p>You want to maximize your profit by choosing a <strong>single day</strong> to buy one stock and choosing a <strong>different day in the future</strong> to sell that stock.</p>\n\n<p>Return <em>the maximum profit you can achieve from this transaction</em>. If you cannot achieve any profit, return <code>0</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> prices = [7,1,5,3,6,4]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> prices = [7,6,4,3,1]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> In this case, no transactions are done and the max profit = 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= prices.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= prices[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "signature": "def maxProfit(self, prices: List[int]) -> int:\n    ",
            "test_cases": [
                "maxProfit([7,1,5,3,6,4])",
                "maxProfit([7,6,4,3,1])",
                "maxProfit([1,2])",
                "maxProfit([2,1])",
                "maxProfit([2,4,1])",
                "maxProfit([3,5,1,7])",
                "maxProfit([5,10,4,6,15,2])",
                "maxProfit([2,6,1,10,7,16])",
                "maxProfit([10])",
                "maxProfit([100,180,260,40,310,535,695])"
            ],
            "expected_outputs": [
                "5",
                "0",
                "1",
                "0",
                "2",
                "6",
                "11",
                "15",
                "0",
                "655"
            ],
            "compare_func": "result == int(expected)"
        },
        {
            "id": 19,
            "title": "Valid Palindrome",
            "description": "<p>A phrase is a <strong>palindrome</strong> if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.</p>\n\n<p>Given a string <code>s</code>, return <code>true</code><em> if it is a <strong>palindrome</strong>, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;A man, a plan, a canal: Panama&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> &quot;amanaplanacanalpanama&quot; is a palindrome.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;race a car&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> &quot;raceacar&quot; is not a palindrome.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot; &quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> s is an empty string &quot;&quot; after removing non-alphanumeric characters.\nSince an empty string reads the same forward and backward, it is a palindrome.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists only of printable ASCII characters.</li>\n</ul>\n",
            "signature": "def isPalindrome(self, s: str) -> bool:\n    ",
            "test_cases": [
                "isPalindrome('A man, a plan, a canal: Panama')",
                "isPalindrome('race a car')",
                "isPalindrome(' ')",
                "isPalindrome('0P')",
                "isPalindrome('abccba')",
                "isPalindrome('abc12321cba')",
                "isPalindrome('1a2')",
                "isPalindrome('Was it a car or a cat I saw?')",
                "isPalindrome('')",
                "isPalindrome('Able , was I saw, eLba')"
            ],
            "expected_outputs": [
                "True",
                "False",
                "True",
                "False",
                "True",
                "True",
                "False",
                "True",
                "True",
                "True"
            ],
            "compare_func": "result == eval(expected)"
        },
        {
            "id": 20,
            "title": "Linked List Cycle",
            "description": "<p>Given <code>head</code>, the head of a linked list, determine if the linked list has a cycle in it.</p>\n\n<p>There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the&nbsp;<code>next</code>&nbsp;pointer. Internally, <code>pos</code>&nbsp;is used to denote the index of the node that&nbsp;tail&#39;s&nbsp;<code>next</code>&nbsp;pointer is connected to.&nbsp;<strong>Note that&nbsp;<code>pos</code>&nbsp;is not passed as a parameter</strong>.</p>\n\n<p>Return&nbsp;<code>true</code><em> if there is a cycle in the linked list</em>. Otherwise, return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png\" style=\"width: 300px; height: 97px; margin-top: 8px; margin-bottom: 8px;\" />\n<pre>\n<strong>Input:</strong> head = [3,2,0,-4], pos = 1\n<strong>Output:</strong> true\n<strong>Explanation:</strong> There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png\" style=\"width: 141px; height: 74px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2], pos = 0\n<strong>Output:</strong> true\n<strong>Explanation:</strong> There is a cycle in the linked list, where the tail connects to the 0th node.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png\" style=\"width: 45px; height: 45px;\" />\n<pre>\n<strong>Input:</strong> head = [1], pos = -1\n<strong>Output:</strong> false\n<strong>Explanation:</strong> There is no cycle in the linked list.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of the nodes in the list is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n\t<li><code>pos</code> is <code>-1</code> or a <strong>valid index</strong> in the linked-list.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Can you solve it using <code>O(1)</code> (i.e. constant) memory?</p>\n",
            "signature": "ass ListNode:\n  def __init__(self, x):\n      self.val = x\n      self.next = None\n\ns Solution:\ndef hasCycle(self, head: Optional[ListNode]) -> bool:\n    ",
            "test_cases": [
                "hasCycle(ListNode.fromList([3,2,0,-4], pos=1))",
                "hasCycle(ListNode.fromList([1,2], pos=0))",
                "hasCycle(ListNode.fromList([1], pos=-1))",
                "hasCycle(ListNode.fromList([], pos=-1))",
                "hasCycle(ListNode.fromList([2,4,6,8], pos=-1))",
                "hasCycle(ListNode.fromList([10,20,30], pos=1))",
                "hasCycle(ListNode.fromList([-5,-10,-15], pos=2))",
                "hasCycle(ListNode.fromList([1], pos=0))",
                "hasCycle(ListNode.fromList([0,0,0,0,0], pos=0))",
                "hasCycle(ListNode.fromList([1,2,3,4,5,6,7,8,9,10], pos=9))"
            ],
            "expected_outputs": [
                "true",
                "true",
                "false",
                "false",
                "false",
                "true",
                "true",
                "true",
                "true",
                "true"
            ],
            "compare_func": "result == (expected.lower() == 'true')"
        },
        {
            "id": 21,
            "title": "Intersection of Two Linked Lists",
            "description": "<p>Given the heads of two singly linked-lists <code>headA</code> and <code>headB</code>, return <em>the node at which the two lists intersect</em>. If the two linked lists have no intersection at all, return <code>null</code>.</p>\n\n<p>For example, the following two linked lists begin to intersect at node <code>c1</code>:</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/05/160_statement.png\" style=\"width: 500px; height: 162px;\" />\n<p>The test cases are generated such that there are no cycles anywhere in the entire linked structure.</p>\n\n<p><strong>Note</strong> that the linked lists must <strong>retain their original structure</strong> after the function returns.</p>\n\n<p><strong>Custom Judge:</strong></p>\n\n<p>The inputs to the <strong>judge</strong> are given as follows (your program is <strong>not</strong> given these inputs):</p>\n\n<ul>\n\t<li><code>intersectVal</code> - The value of the node where the intersection occurs. This is <code>0</code> if there is no intersected node.</li>\n\t<li><code>listA</code> - The first linked list.</li>\n\t<li><code>listB</code> - The second linked list.</li>\n\t<li><code>skipA</code> - The number of nodes to skip ahead in <code>listA</code> (starting from the head) to get to the intersected node.</li>\n\t<li><code>skipB</code> - The number of nodes to skip ahead in <code>listB</code> (starting from the head) to get to the intersected node.</li>\n</ul>\n\n<p>The judge will then create the linked structure based on these inputs and pass the two heads, <code>headA</code> and <code>headB</code> to your program. If you correctly return the intersected node, then your solution will be <strong>accepted</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/05/160_example_1_1.png\" style=\"width: 500px; height: 162px;\" />\n<pre>\n<strong>Input:</strong> intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3\n<strong>Output:</strong> Intersected at &#39;8&#39;\n<strong>Explanation:</strong> The intersected node&#39;s value is 8 (note that this must not be 0 if the two lists intersect).\nFrom the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.\n- Note that the intersected node&#39;s value is not 1 because the nodes with value 1 in A and B (2<sup>nd</sup> node in A and 3<sup>rd</sup> node in B) are different node references. In other words, they point to two different locations in memory, while the nodes with value 8 in A and B (3<sup>rd</sup> node in A and 4<sup>th</sup> node in B) point to the same location in memory.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/05/160_example_2.png\" style=\"width: 500px; height: 194px;\" />\n<pre>\n<strong>Input:</strong> intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\n<strong>Output:</strong> Intersected at &#39;2&#39;\n<strong>Explanation:</strong> The intersected node&#39;s value is 2 (note that this must not be 0 if the two lists intersect).\nFrom the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/05/160_example_3.png\" style=\"width: 300px; height: 189px;\" />\n<pre>\n<strong>Input:</strong> intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\n<strong>Output:</strong> No intersection\n<strong>Explanation:</strong> From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.\nExplanation: The two lists do not intersect, so return null.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes of <code>listA</code> is in the <code>m</code>.</li>\n\t<li>The number of nodes of <code>listB</code> is in the <code>n</code>.</li>\n\t<li><code>1 &lt;= m, n &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= skipA &lt;&nbsp;m</code></li>\n\t<li><code>0 &lt;= skipB &lt;&nbsp;n</code></li>\n\t<li><code>intersectVal</code> is <code>0</code> if <code>listA</code> and <code>listB</code> do not intersect.</li>\n\t<li><code>intersectVal == listA[skipA] == listB[skipB]</code> if <code>listA</code> and <code>listB</code> intersect.</li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you write a solution that runs in <code>O(m + n)</code> time and use only <code>O(1)</code> memory?",
            "signature": "ass ListNode:\n  def __init__(self, x):\n      self.val = x\n      self.next = None\n\ns Solution:\ndef getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:\n    ",
            "test_cases": [
                "{\"intersectVal\": 0, \"listA\": [4,1,8,4,5], \"listB\": [5,6,1,8,4,5], \"skipA\": 5, \"skipB\": 6}",
                "{\"intersectVal\": 8, \"listA\": [4,1,8,4,5], \"listB\": [5,6,1,8,4,5], \"skipA\": 2, \"skipB\": 3}",
                "{\"intersectVal\": 2, \"listA\": [1,9,1,2,4], \"listB\": [3,2,4], \"skipA\": 3, \"skipB\": 1}",
                "{\"intersectVal\": 0, \"listA\": [2,6,4], \"listB\": [1,5], \"skipA\": 3, \"skipB\": 2}",
                "{\"intersectVal\": 10, \"listA\": [1,3,5,7,9,10,12], \"listB\": [0,-2,1,10,12], \"skipA\": 5, \"skipB\": 3}",
                "{\"intersectVal\": 0, \"listA\": [15,30,40,50], \"listB\": [7,11,19,29], \"skipA\": 4, \"skipB\": 4}",
                "{\"intersectVal\": 15, \"listA\": [10,15,20,25,30], \"listB\": [15,20,25,30], \"skipA\": 1, \"skipB\": 0}",
                "{\"intersectVal\": 20, \"listA\": [1,2,5,20,25], \"listB\": [3,4,20,25], \"skipA\": 3, \"skipB\": 2}",
                "{\"intersectVal\": 30, \"listA\": [11,22,33,44,30], \"listB\": [99,88,77,30], \"skipA\": 4, \"skipB\": 3}",
                "{\"intersectVal\": 0, \"listA\": [20,40,60], \"listB\": [10,30,50,70,90], \"skipA\": 3, \"skipB\": 5}"
            ],
            "expected_outputs": [
                "No intersection",
                "Intersected at '8'",
                "Intersected at '2'",
                "No intersection",
                "Intersected at '10'",
                "No intersection",
                "Intersected at '15'",
                "Intersected at '20'",
                "Intersected at '30'",
                "No intersection"
            ],
            "compare_func": "result == expected"
        },
        {
            "id": 22,
            "title": "Excel Sheet Column Title",
            "description": "<p>Given an integer <code>columnNumber</code>, return <em>its corresponding column title as it appears in an Excel sheet</em>.</p>\n\n<p>For example:</p>\n\n<pre>\nA -&gt; 1\nB -&gt; 2\nC -&gt; 3\n...\nZ -&gt; 26\nAA -&gt; 27\nAB -&gt; 28 \n...\n</pre>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> columnNumber = 1\n<strong>Output:</strong> &quot;A&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> columnNumber = 28\n<strong>Output:</strong> &quot;AB&quot;\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> columnNumber = 701\n<strong>Output:</strong> &quot;ZY&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= columnNumber &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
            "signature": "def convertToTitle(self, columnNumber: int) -> str:\n    ",
            "test_cases": [
                "convertToTitle(1)",
                "convertToTitle(28)",
                "convertToTitle(701)",
                "convertToTitle(52)",
                "convertToTitle(703)",
                "convertToTitle(702)",
                "convertToTitle(18278)",
                "convertToTitle(2147483647)",
                "convertToTitle(26)",
                "convertToTitle(27)"
            ],
            "expected_outputs": [
                "A",
                "AB",
                "ZY",
                "AZ",
                "AAA",
                "ZZ",
                "ZZZ",
                "FXSHRXW",
                "Z",
                "AA"
            ],
            "compare_func": "result == expected"
        },
        {
            "id": 23,
            "title": "Rising Temperature",
            "description": "<p>Table: <code>Weather</code></p>\n\n<pre>\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| id            | int     |\n| recordDate    | date    |\n| temperature   | int     |\n+---------------+---------+\nid is the column with unique values for this table.\nThere are no different rows with the same recordDate.\nThis table contains information about the temperature on a certain day.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write a solution to find all dates&#39; <code>id</code> with higher temperatures compared to its previous dates (yesterday).</p>\n\n<p>Return the result table in <strong>any order</strong>.</p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nWeather table:\n+----+------------+-------------+\n| id | recordDate | temperature |\n+----+------------+-------------+\n| 1  | 2015-01-01 | 10          |\n| 2  | 2015-01-02 | 25          |\n| 3  | 2015-01-03 | 20          |\n| 4  | 2015-01-04 | 30          |\n+----+------------+-------------+\n<strong>Output:</strong> \n+----+\n| id |\n+----+\n| 2  |\n| 4  |\n+----+\n<strong>Explanation:</strong> \nIn 2015-01-02, the temperature was higher than the previous day (10 -&gt; 25).\nIn 2015-01-04, the temperature was higher than the previous day (20 -&gt; 30).\n</pre>\n",
            "signature": "nerating a generic Python code stub\ns Solution:\ndef risingTemperature(self) -> Any:\n  ",
            "test_cases": [
                "risingTemperature([[1, '2015-01-01', 10], [2, '2015-01-02', 25], [3, '2015-01-03', 20], [4, '2015-01-04', 30]])",
                "risingTemperature([[1, '2020-05-01', 12], [2, '2020-05-02', 10], [3, '2020-05-03', 15], [4, '2020-05-04', 15]])",
                "risingTemperature([[1, '2021-07-01', 22]])",
                "risingTemperature([[1, '2019-11-10', 2], [2, '2019-11-11', 2], [3, '2019-11-12', 3], [4, '2019-11-13', 3]])",
                "risingTemperature([[1, '2018-04-10', 18], [2, '2018-04-11', 25], [3, '2018-04-12', 19], [4, '2018-04-13', 26], [5, '2018-04-14', 24]])",
                "risingTemperature([[1, '2020-01-01', 0], [2, '2020-01-02', -5], [3, '2020-01-03', 5], [4, '2020-01-04', 0], [5, '2020-01-05', 10]])",
                "risingTemperature([[1, '2017-12-24', 15], [2, '2017-12-25', 20], [3, '2017-12-26', 15], [4, '2017-12-27', 30], [5, '2017-12-28', 10]])",
                "risingTemperature([[1, '2018-03-01', 10], [2, '2018-03-02', 20], [3, '2018-03-03', 15]])",
                "risingTemperature([[1, '2019-06-15', 30], [2, '2019-06-16', 30], [3, '2019-06-17', 35], [4, '2019-06-18', 40], [5, '2019-06-19', 30]])",
                "risingTemperature([[1, '2021-01-01', 10], [2, '2021-01-02', 5], [3, '2021-01-03', 10], [4, '2021-01-04', 15], [5, '2021-01-05', 10]])"
            ],
            "expected_outputs": [
                "[2, 4]",
                "[3]",
                "[]",
                "[3]",
                "[2, 4]",
                "[3, 5]",
                "[2, 4]",
                "[2]",
                "[3, 4]",
                "[3, 4]"
            ],
            "compare_func": "sorted(map(int, result)) == sorted(eval(expected))"
        },
        {
            "id": 24,
            "title": "Happy Number",
            "description": "<p>Write an algorithm to determine if a number <code>n</code> is happy.</p>\n\n<p>A <strong>happy number</strong> is a number defined by the following process:</p>\n\n<ul>\n\t<li>Starting with any positive integer, replace the number by the sum of the squares of its digits.</li>\n\t<li>Repeat the process until the number equals 1 (where it will stay), or it <strong>loops endlessly in a cycle</strong> which does not include 1.</li>\n\t<li>Those numbers for which this process <strong>ends in 1</strong> are happy.</li>\n</ul>\n\n<p>Return <code>true</code> <em>if</em> <code>n</code> <em>is a happy number, and</em> <code>false</code> <em>if not</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 19\n<strong>Output:</strong> true\n<strong>Explanation:</strong>\n1<sup>2</sup> + 9<sup>2</sup> = 82\n8<sup>2</sup> + 2<sup>2</sup> = 68\n6<sup>2</sup> + 8<sup>2</sup> = 100\n1<sup>2</sup> + 0<sup>2</sup> + 0<sup>2</sup> = 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
            "signature": "def isHappy(self, n: int) -> bool:\n    ",
            "test_cases": [
                "isHappy(19)",
                "isHappy(2)",
                "isHappy(1)",
                "isHappy(7)",
                "isHappy(1111111)",
                "isHappy(116)",
                "isHappy(4)",
                "isHappy(123456789)",
                "isHappy(10000000)",
                "isHappy(2147483647)"
            ],
            "expected_outputs": [
                "true",
                "false",
                "true",
                "true",
                "true",
                "true",
                "false",
                "false",
                "true",
                "false"
            ],
            "compare_func": "result == expected.lower()"
        },
        {
            "id": 25,
            "title": "Remove Linked List Elements",
            "description": "<p>Given the <code>head</code> of a linked list and an integer <code>val</code>, remove all the nodes of the linked list that has <code>Node.val == val</code>, and return <em>the new head</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/06/removelinked-list.jpg\" style=\"width: 500px; height: 142px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,6,3,4,5,6], val = 6\n<strong>Output:</strong> [1,2,3,4,5]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = [], val = 1\n<strong>Output:</strong> []\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = [7,7,7,7], val = 7\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>1 &lt;= Node.val &lt;= 50</code></li>\n\t<li><code>0 &lt;= val &lt;= 50</code></li>\n</ul>\n",
            "signature": "ass ListNode:\n  def __init__(self, val=0, next=None):\n      self.val = val\n      self.next = next\ns Solution:\ndef removeElements(self, head: Optional[ListNode], val: int) -> Optional[ListNode]:\n    ",
            "test_cases": [
                "removeElements([1, 2, 6, 3, 4, 5, 6], 6)",
                "removeElements([], 1)",
                "removeElements([7, 7, 7, 7], 7)",
                "removeElements([1, 2, 3], 4)",
                "removeElements([4, 4, 4, 4], 4)",
                "removeElements([4, 2, 1, 4, 3, 4], 4)",
                "removeElements([1, 2, 3, 4, 5], 5)",
                "removeElements([1, 1, 1, 1, 1], 1)",
                "removeElements([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 10)",
                "removeElements([2], 3)"
            ],
            "expected_outputs": [
                "[1, 2, 3, 4, 5]",
                "[]",
                "[]",
                "[1, 2, 3]",
                "[]",
                "[2, 1, 3]",
                "[1, 2, 3, 4]",
                "[]",
                "[9, 8, 7, 6, 5, 4, 3, 2, 1]",
                "[2]"
            ],
            "compare_func": "result == eval(expected)"
        },
        {
            "id": 26,
            "title": "Isomorphic Strings",
            "description": "<p>Given two strings <code>s</code> and <code>t</code>, <em>determine if they are isomorphic</em>.</p>\n\n<p>Two strings <code>s</code> and <code>t</code> are isomorphic if the characters in <code>s</code> can be replaced to get <code>t</code>.</p>\n\n<p>All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;egg&quot;, t = &quot;add&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The strings <code>s</code> and <code>t</code> can be made identical by:</p>\n\n<ul>\n\t<li>Mapping <code>&#39;e&#39;</code> to <code>&#39;a&#39;</code>.</li>\n\t<li>Mapping <code>&#39;g&#39;</code> to <code>&#39;d&#39;</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;foo&quot;, t = &quot;bar&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The strings <code>s</code> and <code>t</code> can not be made identical as <code>&#39;o&#39;</code> needs to be mapped to both <code>&#39;a&#39;</code> and <code>&#39;r&#39;</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;paper&quot;, t = &quot;title&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>t.length == s.length</code></li>\n\t<li><code>s</code> and <code>t</code> consist of any valid ascii character.</li>\n</ul>\n",
            "signature": "def isIsomorphic(self, s: str, t: str) -> bool:\n    ",
            "test_cases": [
                "isIsomorphic('egg', 'add')",
                "isIsomorphic('foo', 'bar')",
                "isIsomorphic('paper', 'title')",
                "isIsomorphic('abcd', 'efgh')",
                "isIsomorphic('abba', 'ccdd')",
                "isIsomorphic('abcd', 'abcc')",
                "isIsomorphic('123123', '456456')",
                "isIsomorphic('abc', 'xyz')",
                "isIsomorphic('aaaa', 'aaaa')",
                "isIsomorphic('a', 'a')"
            ],
            "expected_outputs": [
                "true",
                "false",
                "true",
                "true",
                "false",
                "false",
                "true",
                "true",
                "true",
                "true"
            ],
            "compare_func": "str(result).lower() == expected"
        },
        {
            "id": 27,
            "title": "Contains Duplicate II",
            "description": "<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <code>true</code> <em>if there are two <strong>distinct indices</strong> </em><code>i</code><em> and </em><code>j</code><em> in the array such that </em><code>nums[i] == nums[j]</code><em> and </em><code>abs(i - j) &lt;= k</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,1], k = 3\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,0,1,1], k = 1\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,1,2,3], k = 2\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= k &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "signature": "def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:\n    ",
            "test_cases": [
                "containsNearbyDuplicate([1,2,3,1], 3)",
                "containsNearbyDuplicate([1,0,1,1], 1)",
                "containsNearbyDuplicate([1,2,3,1,2,3], 2)",
                "containsNearbyDuplicate([1], 1)",
                "containsNearbyDuplicate([2,2,2,2,2], 0)",
                "containsNearbyDuplicate([-1,-1], 1)",
                "containsNearbyDuplicate([1,2,3,4,5,6,7,8,9,10], 5)",
                "containsNearbyDuplicate([1,2,3,4,5,6,1], 5)",
                "containsNearbyDuplicate([1,2,2], 2)",
                "containsNearbyDuplicate([1,2,3,4,2,1], 3)"
            ],
            "expected_outputs": [
                "true",
                "true",
                "false",
                "false",
                "false",
                "true",
                "false",
                "true",
                "true",
                "false"
            ],
            "compare_func": "result == (expected.lower() == 'true')"
        },
        {
            "id": 28,
            "title": "Summary Ranges",
            "description": "<p>You are given a <strong>sorted unique</strong> integer array <code>nums</code>.</p>\n\n<p>A <strong>range</strong> <code>[a,b]</code> is the set of all integers from <code>a</code> to <code>b</code> (inclusive).</p>\n\n<p>Return <em>the <strong>smallest sorted</strong> list of ranges that <strong>cover all the numbers in the array exactly</strong></em>. That is, each element of <code>nums</code> is covered by exactly one of the ranges, and there is no integer <code>x</code> such that <code>x</code> is in one of the ranges but not in <code>nums</code>.</p>\n\n<p>Each range <code>[a,b]</code> in the list should be output as:</p>\n\n<ul>\n\t<li><code>&quot;a-&gt;b&quot;</code> if <code>a != b</code></li>\n\t<li><code>&quot;a&quot;</code> if <code>a == b</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,2,4,5,7]\n<strong>Output:</strong> [&quot;0-&gt;2&quot;,&quot;4-&gt;5&quot;,&quot;7&quot;]\n<strong>Explanation:</strong> The ranges are:\n[0,2] --&gt; &quot;0-&gt;2&quot;\n[4,5] --&gt; &quot;4-&gt;5&quot;\n[7,7] --&gt; &quot;7&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,2,3,4,6,8,9]\n<strong>Output:</strong> [&quot;0&quot;,&quot;2-&gt;4&quot;,&quot;6&quot;,&quot;8-&gt;9&quot;]\n<strong>Explanation:</strong> The ranges are:\n[0,0] --&gt; &quot;0&quot;\n[2,4] --&gt; &quot;2-&gt;4&quot;\n[6,6] --&gt; &quot;6&quot;\n[8,9] --&gt; &quot;8-&gt;9&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= nums.length &lt;= 20</code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li>All the values of <code>nums</code> are <strong>unique</strong>.</li>\n\t<li><code>nums</code> is sorted in ascending order.</li>\n</ul>\n",
            "signature": "def summaryRanges(self, nums: List[int]) -> List[str]:\n    ",
            "test_cases": [
                "summaryRanges([])",
                "summaryRanges([5])",
                "summaryRanges([1, 2, 3, 4, 5])",
                "summaryRanges([-1, 0, 1, 2, 3, 4, 5, 10])",
                "summaryRanges([0, 1, 2, 5, 6, 10, 11, 12, 15, 20])",
                "summaryRanges([-10, -9, -8, -1, 0, 1, 8, 9, 10, 15])",
                "summaryRanges([2147483646, 2147483647])",
                "summaryRanges([-2147483648, -2147483647, -2147483646])",
                "summaryRanges([0, 1, 2, 50, 51, 52, 100])",
                "summaryRanges([0, 100, 200, 300, 400, 500])"
            ],
            "expected_outputs": [
                "[]",
                "[\"5\"]",
                "[\"1->5\"]",
                "[\"-1->5\", \"10\"]",
                "[\"0->2\", \"5->6\", \"10->12\", \"15\", \"20\"]",
                "[\"-10->-8\", \"-1->1\", \"8->10\", \"15\"]",
                "[\"2147483646->2147483647\"]",
                "[\"-2147483648->-2147483646\"]",
                "[\"0->2\", \"50->52\", \"100\"]",
                "[\"0\", \"100\", \"200\", \"300\", \"400\", \"500\"]"
            ],
            "compare_func": "result == eval(expected)"
        },
        {
            "id": 29,
            "title": "Power of Two",
            "description": "<p>Given an integer <code>n</code>, return <em><code>true</code> if it is a power of two. Otherwise, return <code>false</code></em>.</p>\n\n<p>An integer <code>n</code> is a power of two, if there exists an integer <code>x</code> such that <code>n == 2<sup>x</sup></code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> true\n<strong>Explanation: </strong>2<sup>0</sup> = 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 16\n<strong>Output:</strong> true\n<strong>Explanation: </strong>2<sup>4</sup> = 16\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you solve it without loops/recursion?",
            "signature": "def isPowerOfTwo(self, n: int) -> bool:\n    ",
            "test_cases": [
                "isPowerOfTwo(1)",
                "isPowerOfTwo(16)",
                "isPowerOfTwo(3)",
                "isPowerOfTwo(0)",
                "isPowerOfTwo(-16)",
                "isPowerOfTwo(2)",
                "isPowerOfTwo(31)",
                "isPowerOfTwo(64)",
                "isPowerOfTwo(1024)",
                "isPowerOfTwo(-2147483648)"
            ],
            "expected_outputs": [
                "true",
                "true",
                "false",
                "false",
                "false",
                "true",
                "false",
                "true",
                "true",
                "false"
            ],
            "compare_func": "str(result).lower() == expected"
        },
        {
            "id": 30,
            "title": "Palindrome Linked List",
            "description": "<p>Given the <code>head</code> of a singly linked list, return <code>true</code><em> if it is a </em><span data-keyword=\"palindrome-sequence\"><em>palindrome</em></span><em> or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/03/pal1linked-list.jpg\" style=\"width: 422px; height: 62px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,2,1]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/03/pal2linked-list.jpg\" style=\"width: 182px; height: 62px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2]\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is in the range <code>[1, 10<sup>5</sup>]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 9</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you do it in <code>O(n)</code> time and <code>O(1)</code> space?",
            "signature": "ass ListNode:\n  def __init__(self, val=0, next=None):\n      self.val = val\n      self.next = next\ns Solution:\ndef isPalindrome(self, head: Optional[ListNode]) -> bool:\n    ",
            "test_cases": [
                "isPalindrome([1,2,2,1])",
                "isPalindrome([1,2])",
                "isPalindrome([1])",
                "isPalindrome([1,0,1])",
                "isPalindrome([9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9])",
                "isPalindrome([0,1,2,3,2,1,0])",
                "isPalindrome([1,2,3,4,3,2,1])",
                "isPalindrome([1,2,3,4,5,4,3,2,1])",
                "isPalindrome([1,2,1])",
                "isPalindrome([1,2,2,1,2])"
            ],
            "expected_outputs": [
                "true",
                "false",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "false"
            ],
            "compare_func": "str(result).lower() == expected.lower()"
        },
        {
            "id": 31,
            "title": "Ugly Number",
            "description": "<p>An <strong>ugly number</strong> is a positive integer whose prime factors are limited to <code>2</code>, <code>3</code>, and <code>5</code>.</p>\n\n<p>Given an integer <code>n</code>, return <code>true</code> <em>if</em> <code>n</code> <em>is an <strong>ugly number</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 6\n<strong>Output:</strong> true\n<strong>Explanation:</strong> 6 = 2 &times; 3\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> true\n<strong>Explanation:</strong> 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 14\n<strong>Output:</strong> false\n<strong>Explanation:</strong> 14 is not ugly since it includes the prime factor 7.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
            "signature": "def isUgly(self, n: int) -> bool:\n    ",
            "test_cases": [
                "isUgly(6)",
                "isUgly(1)",
                "isUgly(14)",
                "isUgly(30)",
                "isUgly(8)",
                "isUgly(0)",
                "isUgly(-6)",
                "isUgly(2**20)",
                "isUgly(3**10 * 5**5)",
                "isUgly(29)"
            ],
            "expected_outputs": [
                "True",
                "True",
                "False",
                "True",
                "True",
                "False",
                "False",
                "True",
                "True",
                "False"
            ],
            "compare_func": "str(result) == expected"
        },
        {
            "id": 32,
            "title": "First Bad Version",
            "description": "<p>You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.</p>\n\n<p>Suppose you have <code>n</code> versions <code>[1, 2, ..., n]</code> and you want to find out the first bad one, which causes all the following ones to be bad.</p>\n\n<p>You are given an API <code>bool isBadVersion(version)</code> which returns whether <code>version</code> is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5, bad = 4\n<strong>Output:</strong> 4\n<strong>Explanation:</strong>\ncall isBadVersion(3) -&gt; false\ncall isBadVersion(5)&nbsp;-&gt; true\ncall isBadVersion(4)&nbsp;-&gt; true\nThen 4 is the first bad version.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, bad = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= bad &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
            "signature": "f isBadVersion(version: int) -> bool:\n\ns Solution:\ndef firstBadVersion(self, n: int) -> int:\n    ",
            "test_cases": [
                "firstBadVersion(5, 4)",
                "firstBadVersion(1, 1)",
                "firstBadVersion(100, 50)",
                "firstBadVersion(10, 10)",
                "firstBadVersion(2, 1)",
                "firstBadVersion(2, 2)",
                "firstBadVersion(15, 8)",
                "firstBadVersion(7, 3)",
                "firstBadVersion(200, 175)",
                "firstBadVersion(1000, 500)"
            ],
            "expected_outputs": [
                "4",
                "1",
                "50",
                "10",
                "1",
                "2",
                "8",
                "3",
                "175",
                "500"
            ],
            "compare_func": "int(result) == int(expected)"
        },
        {
            "id": 33,
            "title": "Word Pattern",
            "description": "<p>Given a <code>pattern</code> and a string <code>s</code>, find if <code>s</code>&nbsp;follows the same pattern.</p>\n\n<p>Here <b>follow</b> means a full match, such that there is a bijection between a letter in <code>pattern</code> and a <b>non-empty</b> word in <code>s</code>. Specifically:</p>\n\n<ul>\n\t<li>Each letter in <code>pattern</code> maps to <strong>exactly</strong> one unique word in <code>s</code>.</li>\n\t<li>Each unique word in <code>s</code> maps to <strong>exactly</strong> one letter in <code>pattern</code>.</li>\n\t<li>No two letters map to the same word, and no two words map to the same letter.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">pattern = &quot;abba&quot;, s = &quot;dog cat cat dog&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The bijection can be established as:</p>\n\n<ul>\n\t<li><code>&#39;a&#39;</code> maps to <code>&quot;dog&quot;</code>.</li>\n\t<li><code>&#39;b&#39;</code> maps to <code>&quot;cat&quot;</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">pattern = &quot;abba&quot;, s = &quot;dog cat cat fish&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">pattern = &quot;aaaa&quot;, s = &quot;dog cat cat dog&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= pattern.length &lt;= 300</code></li>\n\t<li><code>pattern</code> contains only lower-case English letters.</li>\n\t<li><code>1 &lt;= s.length &lt;= 3000</code></li>\n\t<li><code>s</code> contains only lowercase English letters and spaces <code>&#39; &#39;</code>.</li>\n\t<li><code>s</code> <strong>does not contain</strong> any leading or trailing spaces.</li>\n\t<li>All the words in <code>s</code> are separated by a <strong>single space</strong>.</li>\n</ul>\n",
            "signature": "def wordPattern(self, pattern: str, s: str) -> bool:\n    ",
            "test_cases": [
                "wordPattern('abba', 'dog cat cat dog')",
                "wordPattern('abba', 'dog cat cat fish')",
                "wordPattern('aaaa', 'dog cat cat dog')",
                "wordPattern('aaa', 'dog dog dog')",
                "wordPattern('abc', 'dog cat fish')",
                "wordPattern('abcd', 'dog cat fish')",
                "wordPattern('abab', 'dog cat dog cat')",
                "wordPattern('aaaa', 'dog dog dog dog')",
                "wordPattern('a', 'dog')",
                "wordPattern('abc', 'dog dog dog')"
            ],
            "expected_outputs": [
                "True",
                "False",
                "False",
                "True",
                "True",
                "False",
                "True",
                "True",
                "True",
                "False"
            ],
            "compare_func": "result == (expected == 'True')"
        },
        {
            "id": 34,
            "title": "Nim Game",
            "description": "<p>You are playing the following Nim Game with your friend:</p>\n\n<ul>\n\t<li>Initially, there is a heap of stones on the table.</li>\n\t<li>You and your friend will alternate taking turns, and <strong>you go first</strong>.</li>\n\t<li>On each turn, the person whose turn it is will remove 1 to 3 stones from the heap.</li>\n\t<li>The one who removes the last stone is the winner.</li>\n</ul>\n\n<p>Given <code>n</code>, the number of stones in the heap, return <code>true</code><em> if you can win the game assuming both you and your friend play optimally, otherwise return </em><code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4\n<strong>Output:</strong> false\n<strong>Explanation:</strong> These are the possible outcomes:\n1. You remove 1 stone. Your friend removes 3 stones, including the last stone. Your friend wins.\n2. You remove 2 stones. Your friend removes 2 stones, including the last stone. Your friend wins.\n3. You remove 3 stones. Your friend removes the last stone. Your friend wins.\nIn all outcomes, your friend wins.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
            "signature": "def canWinNim(self, n: int) -> bool:\n    ",
            "test_cases": [
                "canWinNim(1)",
                "canWinNim(2)",
                "canWinNim(3)",
                "canWinNim(4)",
                "canWinNim(5)",
                "canWinNim(6)",
                "canWinNim(7)",
                "canWinNim(8)",
                "canWinNim(10)",
                "canWinNim(15)"
            ],
            "expected_outputs": [
                "true",
                "true",
                "true",
                "false",
                "true",
                "true",
                "true",
                "false",
                "true",
                "false"
            ],
            "compare_func": "result == str(expected).lower()"
        },
        {
            "id": 35,
            "title": "Power of Three",
            "description": "<p>Given an integer <code>n</code>, return <em><code>true</code> if it is a power of three. Otherwise, return <code>false</code></em>.</p>\n\n<p>An integer <code>n</code> is a power of three, if there exists an integer <code>x</code> such that <code>n == 3<sup>x</sup></code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 27\n<strong>Output:</strong> true\n<strong>Explanation:</strong> 27 = 3<sup>3</sup>\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 0\n<strong>Output:</strong> false\n<strong>Explanation:</strong> There is no x where 3<sup>x</sup> = 0.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = -1\n<strong>Output:</strong> false\n<strong>Explanation:</strong> There is no x where 3<sup>x</sup> = (-1).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you solve it without loops/recursion?",
            "signature": "def isPowerOfThree(self, n: int) -> bool:\n    ",
            "test_cases": [
                "isPowerOfThree(27)",
                "isPowerOfThree(0)",
                "isPowerOfThree(-1)",
                "isPowerOfThree(1)",
                "isPowerOfThree(9)",
                "isPowerOfThree(10)",
                "isPowerOfThree(243)",
                "isPowerOfThree(81)",
                "isPowerOfThree(-3)",
                "isPowerOfThree(2)"
            ],
            "expected_outputs": [
                "true",
                "false",
                "false",
                "true",
                "true",
                "false",
                "true",
                "true",
                "false",
                "false"
            ],
            "compare_func": "result == expected"
        },
        {
            "id": 36,
            "title": "Power of Four",
            "description": "<p>Given an integer <code>n</code>, return <em><code>true</code> if it is a power of four. Otherwise, return <code>false</code></em>.</p>\n\n<p>An integer <code>n</code> is a power of four, if there exists an integer <code>x</code> such that <code>n == 4<sup>x</sup></code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> n = 16\n<strong>Output:</strong> true\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> n = 5\n<strong>Output:</strong> false\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> n = 1\n<strong>Output:</strong> true\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you solve it without loops/recursion?",
            "signature": "def isPowerOfFour(self, n: int) -> bool:\n    ",
            "test_cases": [
                "isPowerOfFour(16)",
                "isPowerOfFour(5)",
                "isPowerOfFour(1)",
                "isPowerOfFour(0)",
                "isPowerOfFour(-4)",
                "isPowerOfFour(64)",
                "isPowerOfFour(1024)",
                "isPowerOfFour(-1024)",
                "isPowerOfFour(4)",
                "isPowerOfFour(8)"
            ],
            "expected_outputs": [
                "true",
                "false",
                "true",
                "false",
                "false",
                "true",
                "false",
                "false",
                "true",
                "false"
            ],
            "compare_func": "str(result).lower() == expected"
        },
        {
            "id": 37,
            "title": "Reverse Vowels of a String",
            "description": "<p>Given a string <code>s</code>, reverse only all the vowels in the string and return it.</p>\n\n<p>The vowels are <code>&#39;a&#39;</code>, <code>&#39;e&#39;</code>, <code>&#39;i&#39;</code>, <code>&#39;o&#39;</code>, and <code>&#39;u&#39;</code>, and they can appear in both lower and upper cases, more than once.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;IceCreAm&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;AceCreIm&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The vowels in <code>s</code> are <code>[&#39;I&#39;, &#39;e&#39;, &#39;e&#39;, &#39;A&#39;]</code>. On reversing the vowels, s becomes <code>&quot;AceCreIm&quot;</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;leetcode&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;leotcede&quot;</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 3 * 10<sup>5</sup></code></li>\n\t<li><code>s</code> consist of <strong>printable ASCII</strong> characters.</li>\n</ul>\n",
            "signature": "def reverseVowels(self, s: str) -> str:\n    ",
            "test_cases": [
                "reverseVowels('IceCreAm')",
                "reverseVowels('leetcode')",
                "reverseVowels('a')",
                "reverseVowels('aeiou')",
                "reverseVowels('AEIOU')",
                "reverseVowels(' bcdeBCDF')",
                "reverseVowels('')",
                "reverseVowels('Hello, World!')",
                "reverseVowels('Why not swap?')",
                "reverseVowels('THE QUICK BROWN FOX')"
            ],
            "expected_outputs": [
                "'AceCreIm'",
                "'leotcede'",
                "'a'",
                "'uoiea'",
                "'UOIEA'",
                "' bcdeBCDF'",
                "''",
                "'Hollo, Werld!'",
                "'Why not swap?'",
                "'THU QEICK BROWN FOX'"
            ],
            "compare_func": "result == expected"
        },
        {
            "id": 38,
            "title": "Intersection of Two Arrays II",
            "description": "<p>Given two integer arrays <code>nums1</code> and <code>nums2</code>, return <em>an array of their intersection</em>. Each element in the result must appear as many times as it shows in both arrays and you may return the result in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2,2,1], nums2 = [2,2]\n<strong>Output:</strong> [2,2]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n<strong>Output:</strong> [4,9]\n<strong>Explanation:</strong> [9,4] is also accepted.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>What if the given array is already sorted? How would you optimize your algorithm?</li>\n\t<li>What if <code>nums1</code>&#39;s size is small compared to <code>nums2</code>&#39;s size? Which algorithm is better?</li>\n\t<li>What if elements of <code>nums2</code> are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?</li>\n</ul>\n",
            "signature": "def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:\n    ",
            "test_cases": [
                "intersect([1,2,2,1], [2,2])",
                "intersect([4,9,5], [9,4,9,8,4])",
                "intersect([1,2,3], [4,5,6])",
                "intersect([0], [0,0,0,0])",
                "intersect([], [1,2,3])",
                "intersect([1,2,3], [])",
                "intersect([1,1,1,1], [1,2,3,1,1,1,1,1])",
                "intersect([2,3,4,5], [1,1,1,1,1])",
                "intersect([1000,1000,1000,1000], [1000,1000])",
                "intersect([5,5,5,5], [5,5,5,5,5,5,5,5])"
            ],
            "expected_outputs": [
                "[2,2]",
                "[4,9]",
                "[]",
                "[0]",
                "[]",
                "[]",
                "[1,1,1,1]",
                "[]",
                "[1000,1000]",
                "[5,5,5,5]"
            ],
            "compare_func": "sorted(result) == eval(expected)"
        },
        {
            "id": 39,
            "title": "Valid Perfect Square",
            "description": "<p>Given a positive integer num, return <code>true</code> <em>if</em> <code>num</code> <em>is a perfect square or</em> <code>false</code> <em>otherwise</em>.</p>\n\n<p>A <strong>perfect square</strong> is an integer that is the square of an integer. In other words, it is the product of some integer with itself.</p>\n\n<p>You must not use any built-in library function, such as <code>sqrt</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 16\n<strong>Output:</strong> true\n<strong>Explanation:</strong> We return true because 4 * 4 = 16 and 4 is an integer.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 14\n<strong>Output:</strong> false\n<strong>Explanation:</strong> We return false because 3.742 * 3.742 = 14 and 3.742 is not an integer.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
            "signature": "def isPerfectSquare(self, num: int) -> bool:\n    ",
            "test_cases": [
                "isPerfectSquare(16)",
                "isPerfectSquare(14)",
                "isPerfectSquare(1)",
                "isPerfectSquare(2147483647)",
                "isPerfectSquare(9)",
                "isPerfectSquare(1000000)",
                "isPerfectSquare(2)",
                "isPerfectSquare(4)",
                "isPerfectSquare(808201)",
                "isPerfectSquare(49)"
            ],
            "expected_outputs": [
                "true",
                "false",
                "true",
                "false",
                "true",
                "true",
                "false",
                "true",
                "true",
                "true"
            ],
            "compare_func": "str(result).lower() == expected"
        },
        {
            "id": 40,
            "title": "Guess Number Higher or Lower",
            "description": "<p>We are playing the Guess Game. The game is as follows:</p>\n\n<p>I pick a number from <code>1</code> to <code>n</code>. You have to guess which number I picked.</p>\n\n<p>Every time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.</p>\n\n<p>You call a pre-defined API <code>int guess(int num)</code>, which returns three possible results:</p>\n\n<ul>\n\t<li><code>-1</code>: Your guess is higher than the number I picked (i.e. <code>num &gt; pick</code>).</li>\n\t<li><code>1</code>: Your guess is lower than the number I picked (i.e. <code>num &lt; pick</code>).</li>\n\t<li><code>0</code>: your guess is equal to the number I picked (i.e. <code>num == pick</code>).</li>\n</ul>\n\n<p>Return <em>the number that I picked</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 10, pick = 6\n<strong>Output:</strong> 6\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, pick = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, pick = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>1 &lt;= pick &lt;= n</code></li>\n</ul>\n",
            "signature": "aram num, your guess\neturn -1 if num is higher than the picked number\n       1 if num is lower than the picked number\n       otherwise return 0\nf guess(num: int) -> int:\n\ns Solution:\ndef guessNumber(self, n: int) -> int:\n    ",
            "test_cases": [
                "guessNumber(1)",
                "guessNumber(10)",
                "guessNumber(2)",
                "guessNumber(100)",
                "guessNumber(1000)",
                "guessNumber(5000)",
                "guessNumber(10000)",
                "guessNumber(1000000)",
                "guessNumber(2147483647)",
                "guessNumber(2147483647)"
            ],
            "expected_outputs": [
                "1",
                "6",
                "1",
                "50",
                "500",
                "2500",
                "5000",
                "500000",
                "1073741824",
                "2147483647"
            ],
            "compare_func": "result == str(expected)"
        },
        {
            "id": 41,
            "title": "Find the Difference",
            "description": "<p>You are given two strings <code>s</code> and <code>t</code>.</p>\n\n<p>String <code>t</code> is generated by random shuffling string <code>s</code> and then add one more letter at a random position.</p>\n\n<p>Return the letter that was added to <code>t</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcd&quot;, t = &quot;abcde&quot;\n<strong>Output:</strong> &quot;e&quot;\n<strong>Explanation:</strong> &#39;e&#39; is the letter that was added.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;&quot;, t = &quot;y&quot;\n<strong>Output:</strong> &quot;y&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>t.length == s.length + 1</code></li>\n\t<li><code>s</code> and <code>t</code> consist of lowercase English letters.</li>\n</ul>\n",
            "signature": "def findTheDifference(self, s: str, t: str) -> str:\n    ",
            "test_cases": [
                "findTheDifference('', 'y')",
                "findTheDifference('a', 'aa')",
                "findTheDifference('abcd', 'abcde')",
                "findTheDifference('xyz', 'yxzz')",
                "findTheDifference('race', 'ecrac')",
                "findTheDifference('hello', 'ollheo')",
                "findTheDifference('aaa', 'aaaa')",
                "findTheDifference('mississippi', 'imississippix')",
                "findTheDifference('platform', 'farmptrol')",
                "findTheDifference('straw', 'rawstb')"
            ],
            "expected_outputs": [
                "'y'",
                "'a'",
                "'e'",
                "'z'",
                "'c'",
                "'o'",
                "'a'",
                "'x'",
                "'l'",
                "'b'"
            ],
            "compare_func": "result == expected"
        },
        {
            "id": 42,
            "title": "Is Subsequence",
            "description": "<p>Given two strings <code>s</code> and <code>t</code>, return <code>true</code><em> if </em><code>s</code><em> is a <strong>subsequence</strong> of </em><code>t</code><em>, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>A <strong>subsequence</strong> of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., <code>&quot;ace&quot;</code> is a subsequence of <code>&quot;<u>a</u>b<u>c</u>d<u>e</u>&quot;</code> while <code>&quot;aec&quot;</code> is not).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"abc\", t = \"ahbgdc\"\n<strong>Output:</strong> true\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"axc\", t = \"ahbgdc\"\n<strong>Output:</strong> false\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= t.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> and <code>t</code> consist only of lowercase English letters.</li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Suppose there are lots of incoming <code>s</code>, say <code>s<sub>1</sub>, s<sub>2</sub>, ..., s<sub>k</sub></code> where <code>k &gt;= 10<sup>9</sup></code>, and you want to check one by one to see if <code>t</code> has its subsequence. In this scenario, how would you change your code?",
            "signature": "def isSubsequence(self, s: str, t: str) -> bool:\n    ",
            "test_cases": [
                "isSubsequence(\"abc\", \"ahbgdc\")",
                "isSubsequence(\"axc\", \"ahbgdc\")",
                "isSubsequence(\"\", \"ahbgdc\")",
                "isSubsequence(\"abc\", \"\")",
                "isSubsequence(\"a\", \"a\")",
                "isSubsequence(\"\", \"\")",
                "isSubsequence(\"gdc\", \"ahbgdc\")",
                "isSubsequence(\"ace\", \"abcde\")",
                "isSubsequence(\"abcde\", \"abcde\")",
                "isSubsequence(\"z\", \"abcde\")"
            ],
            "expected_outputs": [
                "true",
                "false",
                "true",
                "false",
                "true",
                "true",
                "true",
                "true",
                "true",
                "false"
            ],
            "compare_func": "result == (expected.lower() == 'true')"
        },
        {
            "id": 43,
            "title": "Binary Watch",
            "description": "<p>A binary watch has 4 LEDs on the top to represent the hours (0-11), and 6 LEDs on the bottom to represent&nbsp;the minutes (0-59). Each LED represents a zero or one, with the least significant bit on the right.</p>\n\n<ul>\n\t<li>For example, the below binary watch reads <code>&quot;4:51&quot;</code>.</li>\n</ul>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/08/binarywatch.jpg\" style=\"width: 500px; height: 500px;\" /></p>\n\n<p>Given an integer <code>turnedOn</code> which represents the number of LEDs that are currently on (ignoring the PM), return <em>all possible times the watch could represent</em>. You may return the answer in <strong>any order</strong>.</p>\n\n<p>The hour must not contain a leading zero.</p>\n\n<ul>\n\t<li>For example, <code>&quot;01:00&quot;</code> is not valid. It should be <code>&quot;1:00&quot;</code>.</li>\n</ul>\n\n<p>The minute must&nbsp;consist of two digits and may contain a leading zero.</p>\n\n<ul>\n\t<li>For example, <code>&quot;10:2&quot;</code> is not valid. It should be <code>&quot;10:02&quot;</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> turnedOn = 1\n<strong>Output:</strong> [\"0:01\",\"0:02\",\"0:04\",\"0:08\",\"0:16\",\"0:32\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> turnedOn = 9\n<strong>Output:</strong> []\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= turnedOn &lt;= 10</code></li>\n</ul>\n",
            "signature": "def readBinaryWatch(self, turnedOn: int) -> List[str]:\n    ",
            "test_cases": [
                "readBinaryWatch(0)",
                "readBinaryWatch(1)",
                "readBinaryWatch(2)",
                "readBinaryWatch(3)",
                "readBinaryWatch(4)",
                "readBinaryWatch(5)",
                "readBinaryWatch(6)",
                "readBinaryWatch(7)",
                "readBinaryWatch(8)",
                "readBinaryWatch(9)",
                "readBinaryWatch(10)"
            ],
            "expected_outputs": [
                "['0:00']",
                "['0:01','0:02','0:04','0:08','0:16','0:32','1:00','2:00','4:00','8:00']",
                "['0:03','0:05','0:06','0:09','0:10','0:12','0:17','0:18','0:20','0:24','0:33','0:34','0:36','0:40','0:48','1:01','1:02','1:04','1:08','1:16','1:32','2:01','2:02','2:04','2:08','2:16','2:32','3:00','4:01','4:02','4:04','4:08','4:16','4:32','5:00','6:00','8:01','8:02','8:04','8:08','8:16','8:32','9:00','10:00']",
                "['0:07','0:11','0:13','0:14','0:19','0:21','0:22','0:25','0:26','0:28','0:35','0:37','0:38','0:41','0:42','0:44','0:49','0:50','0:52','0:56','1:03','1:05','1:06','1:09','1:10','1:12','1:17','1:18','1:20','1:24','1:33','1:34','1:36','1:40','1:48','2:03','2:05','2:06','2:09','2:10','2:12','2:17','2:18','2:20','2:24','2:33','2:34','2:36','2:40','2:48','3:01','3:02','3:04','3:08','3:16','3:32','4:03','4:05','4:06','4:09','4:10','4:12','4:17','4:18','4:20','4:24','4:33','4:34','4:36','4:40','4:48','5:01','5:02','5:04','5:08','5:16','5:32','6:01','6:02','6:04','6:08','6:16','6:32','7:00','8:03','8:05','8:06','8:09','8:10','8:12','8:17','8:18','8:20','8:24','8:33','8:34','8:36','8:40','8:48','9:01','9:02','9:04','9:08','9:16','9:32','10:01','10:02','10:04','10:08','10:16','10:32','11:00']",
                "['0:15','0:23','0:27','0:29','0:30','0:39','0:43','0:45','0:46','0:51','0:53','0:54','0:57','0:58','1:07','1:11','1:13','1:14','1:19','1:21','1:22','1:25','1:26','1:28','1:35','1:37','1:38','1:41','1:42','1:44','1:49','1:50','1:52','1:56','2:07','2:11','2:13','2:14','2:19','2:21','2:22','2:25','2:26','2:28','2:35','2:37','2:38','2:41','2:42','2:44','2:49','2:50','2:52','2:56','3:03','3:05','3:06','3:09','3:10','3:12','3:17','3:18','3:20','3:24','3:33','3:34','3:36','3:40','3:48','4:07','4:11','4:13','4:14','4:19','4:21','4:22','4:25','4:26','4:28','4:35','4:37','4:38','4:41','4:42','4:44','4:49','4:50','4:52','4:56','5:03','5:05','5:06','5:09','5:10','5:12','5:17','5:18','5:20','5:24','5:33','5:34','5:36','5:40','5:48','6:03','6:05','6:06','6:09','6:10','6:12','6:17','6:18','6:20','6:24','6:33','6:34','6:36','6:40','6:48','7:01','7:02','7:04','7:08','7:16','7:32','8:07','8:11','8:13','8:14','8:19','8:21','8:22','8:25','8:26','8:28','8:35','8:37','8:38','8:41','8:42','8:44','8:49','8:50','8:52','8:56','9:03','9:05','9:06','9:09','9:10','9:12','9:17','9:18','9:20','9:24','9:33','9:34','9:36','9:40','9:48','10:03','10:05','10:06','10:09','10:10','10:12','10:17','10:18','10:20','10:24','10:33','10:34','10:36','10:40','10:48','11:01','11:02','11:04','11:08','11:16','11:32']",
                "['0:31','0:47','0:55','0:59','1:15','1:23','1:27','1:29','1:30','1:39','1:43','1:45','1:46','1:51','1:53','1:54','1:57','1:58','2:15','2:23','2:27','2:29','2:30','2:39','2:43','2:45','2:46','2:51','2:53','2:54','2:57','2:58','3:07','3:11','3:13','3:14','3:19','3:21','3:22','3:25','3:26','3:28','3:35','3:37','3:38','3:41','3:42','3:44','3:49','3:50','3:52','3:56','4:15','4:23','4:27','4:29','4:30','4:39','4:43','4:45','4:46','4:51','4:53','4:54','4:57','4:58','5:07','5:11','5:13','5:14','5:19','5:21','5:22','5:25','5:26','5:28','5:35','5:37','5:38','5:41','5:42','5:44','5:49','5:50','5:52','5:56','6:07','6:11','6:13','6:14','6:19','6:21','6:22','6:25','6:26','6:28','6:35','6:37','6:38','6:41','6:42','6:44','6:49','6:50','6:52','6:56','7:03','7:05','7:06','7:09','7:10','7:12','7:17','7:18','7:20','7:24','7:33','7:34','7:36','7:40','7:48','8:15','8:23','8:27','8:29','8:30','8:39','8:43','8:45','8:46','8:51','8:53','8:54','8:57','8:58','9:07','9:11','9:13','9:14','9:19','9:21','9:22','9:25','9:26','9:28','9:35','9:37','9:38','9:41','9:42','9:44','9:49','9:50','9:52','9:56','10:07','10:11','10:13','10:14','10:19','10:21','10:22','10:25','10:26','10:28','10:35','10:37','10:38','10:41','10:42','10:44','10:49','10:50','10:52','10:56','11:03','11:05','11:06','11:09','11:10','11:12','11:17','11:18','11:20','11:24','11:33','11:34','11:36','11:40','11:48']",
                "['1:31','1:47','1:55','1:59','2:31','2:47','2:55','2:59','3:15','3:23','3:27','3:29','3:30','3:39','3:43','3:45','3:46','3:51','3:53','3:54','3:57','3:58','4:31','4:47','4:55','4:59','5:15','5:23','5:27','5:29','5:30','5:39','5:43','5:45','5:46','5:51','5:53','5:54','5:57','5:58','6:15','6:23','6:27','6:29','6:30','6:39','6:43','6:45','6:46','6:51','6:53','6:54','6:57','6:58','7:07','7:11','7:13','7:14','7:19','7:21','7:22','7:25','7:26','7:28','7:35','7:37','7:38','7:41','7:42','7:44','7:49','7:50','7:52','7:56','8:31','8:47','8:55','8:59','9:15','9:23','9:27','9:29','9:30','9:39','9:43','9:45','9:46','9:51','9:53','9:54','9:57','9:58','10:15','10:23','10:27','10:29','10:30','10:39','10:43','10:45','10:46','10:51','10:53','10:54','10:57','10:58','11:07','11:11','11:13','11:14','11:19','11:21','11:22','11:25','11:26','11:28','11:35','11:37','11:38','11:41','11:42','11:44','11:49','11:50','11:52','11:56']",
                "['2:07','2:11','2:13','2:14','2:19','2:21','2:22','2:25','2:26','2:28','2:35','2:37','2:38','2:41','2:42','2:44','2:49','2:50','2:52','2:56','3:31','3:47','3:55','3:59','4:15','4:23','4:27','4:29','4:30','4:39','4:43','4:45','4:46','4:51','4:53','4:54','4:57','4:58','5:31','5:47','5:55','5:59','6:15','6:23','6:27','6:29','6:30','6:39','6:43','6:45','6:46','6:51','6:53','6:54','6:57','6:58','7:07','7:11','7:13','7:14','7:19','7:21','7:22','7:25','7:26','7:28','7:35','7:37','7:38','7:41','7:42','7:44','7:49','7:50','7:52','7:56','8:07','8:11','8:13','8:14','8:19','8:21','8:22','8:25','8:26','8:28','8:35','8:37','8:38','8:41','8:42','8:44','8:49','8:50','8:52','8:56','9:07','9:11','9:13','9:14','9:19','9:21','9:22','9:25','9:26','9:28','9:35','9:37','9:38','9:41','9:42','9:44','9:49','9:50','9:52','9:56','10:07','10:11','10:13','10:14','10:19','10:21','10:22','10:25','10:26','10:28','10:35','10:37','10:38','10:41','10:42','10:44','10:49','10:50','10:52','10:56','11:15','11:23','11:27','11:29','11:30','11:39','11:43','11:45','11:46','11:51','11:53','11:54','11:57','11:58']",
                "[]"
            ],
            "compare_func": "sorted(result) == eval(sorted(expected))"
        },
        {
            "id": 44,
            "title": "Convert a Number to Hexadecimal",
            "description": "<p>Given a 32-bit integer <code>num</code>, return <em>a string representing its hexadecimal representation</em>. For negative integers, <a href=\"https://en.wikipedia.org/wiki/Two%27s_complement\" target=\"_blank\">two&rsquo;s complement</a> method is used.</p>\n\n<p>All the letters in the answer string should be lowercase characters, and there should not be any leading zeros in the answer except for the zero itself.</p>\n\n<p><strong>Note:&nbsp;</strong>You are not allowed to use any built-in library method to directly solve this problem.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> num = 26\n<strong>Output:</strong> \"1a\"\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> num = -1\n<strong>Output:</strong> \"ffffffff\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= num &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
            "signature": "def toHex(self, num: int) -> str:\n    ",
            "test_cases": [
                "toHex(0)",
                "toHex(1)",
                "toHex(26)",
                "toHex(255)",
                "toHex(256)",
                "toHex(-1)",
                "toHex(2147483647)",
                "toHex(-2147483648)",
                "toHex(4095)",
                "toHex(-4096)"
            ],
            "expected_outputs": [
                "\"0\"",
                "\"1\"",
                "\"1a\"",
                "\"ff\"",
                "\"100\"",
                "\"ffffffff\"",
                "\"7fffffff\"",
                "\"80000000\"",
                "\"fff\"",
                "\"fffff000\""
            ],
            "compare_func": "result == expected"
        },
        {
            "id": 45,
            "title": "Longest Palindrome",
            "description": "<p>Given a string <code>s</code> which consists of lowercase or uppercase letters, return the length of the <strong>longest <span data-keyword=\"palindrome-string\">palindrome</span></strong>&nbsp;that can be built with those letters.</p>\n\n<p>Letters are <strong>case sensitive</strong>, for example, <code>&quot;Aa&quot;</code> is not considered a palindrome.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abccccdd&quot;\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> One longest palindrome that can be built is &quot;dccaccd&quot;, whose length is 7.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The longest palindrome that can be built is &quot;a&quot;, whose length is 1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 2000</code></li>\n\t<li><code>s</code> consists of lowercase <strong>and/or</strong> uppercase English&nbsp;letters only.</li>\n</ul>\n",
            "signature": "def longestPalindrome(self, s: str) -> int:\n    ",
            "test_cases": [
                "longestPalindrome('a')",
                "longestPalindrome('abccccdd')",
                "longestPalindrome('Aa')",
                "longestPalindrome('AaBbCcDd')",
                "longestPalindrome('abcbaabccba')",
                "longestPalindrome('')",
                "longestPalindrome('A')",
                "longestPalindrome('AaAAaa')",
                "longestPalindrome('level')",
                "longestPalindrome('civic')"
            ],
            "expected_outputs": [
                "1",
                "7",
                "1",
                "1",
                "11",
                "0",
                "1",
                "5",
                "5",
                "5"
            ],
            "compare_func": "result == str(expected)"
        },
        {
            "id": 46,
            "title": "Add Strings",
            "description": "<p>Given two non-negative integers, <code>num1</code> and <code>num2</code> represented as string, return <em>the sum of</em> <code>num1</code> <em>and</em> <code>num2</code> <em>as a string</em>.</p>\n\n<p>You must solve the problem without using any built-in library for handling large integers (such as <code>BigInteger</code>). You must also not convert the inputs to integers directly.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num1 = &quot;11&quot;, num2 = &quot;123&quot;\n<strong>Output:</strong> &quot;134&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num1 = &quot;456&quot;, num2 = &quot;77&quot;\n<strong>Output:</strong> &quot;533&quot;\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> num1 = &quot;0&quot;, num2 = &quot;0&quot;\n<strong>Output:</strong> &quot;0&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num1.length, num2.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>num1</code> and <code>num2</code> consist of only digits.</li>\n\t<li><code>num1</code> and <code>num2</code> don&#39;t have any leading zeros except for the zero itself.</li>\n</ul>\n",
            "signature": "def addStrings(self, num1: str, num2: str) -> str:\n    ",
            "test_cases": [
                "addStrings('11', '123')",
                "addStrings('456', '77')",
                "addStrings('0', '0')",
                "addStrings('0', '123456789')",
                "addStrings('9999999999', '1')",
                "addStrings('1234', '4321')",
                "addStrings('999', '999')",
                "addStrings('1', '999999999999')",
                "addStrings('12345678901234567890', '98765432109876543210')",
                "addStrings('5000', '5000')"
            ],
            "expected_outputs": [
                "134",
                "533",
                "0",
                "123456789",
                "10000000000",
                "5555",
                "1998",
                "1000000000000",
                "111111111011111111100",
                "10000"
            ],
            "compare_func": "result == expected"
        },
        {
            "id": 47,
            "title": "Arranging Coins",
            "description": "<p>You have <code>n</code> coins and you want to build a staircase with these coins. The staircase consists of <code>k</code> rows where the <code>i<sup>th</sup></code> row has exactly <code>i</code> coins. The last row of the staircase <strong>may be</strong> incomplete.</p>\n\n<p>Given the integer <code>n</code>, return <em>the number of <strong>complete rows</strong> of the staircase you will build</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/09/arrangecoins1-grid.jpg\" style=\"width: 253px; height: 253px;\" />\n<pre>\n<strong>Input:</strong> n = 5\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Because the 3<sup>rd</sup> row is incomplete, we return 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/09/arrangecoins2-grid.jpg\" style=\"width: 333px; height: 333px;\" />\n<pre>\n<strong>Input:</strong> n = 8\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Because the 4<sup>th</sup> row is incomplete, we return 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
            "signature": "def arrangeCoins(self, n: int) -> int:\n    ",
            "test_cases": [
                "arrangeCoins(5)",
                "arrangeCoins(8)",
                "arrangeCoins(0)",
                "arrangeCoins(1)",
                "arrangeCoins(3)",
                "arrangeCoins(6)",
                "arrangeCoins(10)",
                "arrangeCoins(15)",
                "arrangeCoins(21)",
                "arrangeCoins(2147483647)"
            ],
            "expected_outputs": [
                "2",
                "3",
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "65535"
            ],
            "compare_func": "result == int(expected)"
        },
        {
            "id": 48,
            "title": "Assign Cookies",
            "description": "<p>Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.</p>\n\n<p>Each child <code>i</code> has a greed factor <code>g[i]</code>, which is the minimum size of a cookie that the child will be content with; and each cookie <code>j</code> has a size <code>s[j]</code>. If <code>s[j] &gt;= g[i]</code>, we can assign the cookie <code>j</code> to the child <code>i</code>, and the child <code>i</code> will be content. Your goal is to maximize the number of your content children and output the maximum number.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> g = [1,2,3], s = [1,1]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. \nAnd even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.\nYou need to output 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> g = [1,2], s = [1,2,3]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. \nYou have 3 cookies and their sizes are big enough to gratify all of the children, \nYou need to output 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= g.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= s.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= g[i], s[j] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Note:</strong> This question is the same as <a href=\"https://leetcode.com/problems/maximum-matching-of-players-with-trainers/description/\" target=\"_blank\"> 2410: Maximum Matching of Players With Trainers.</a></p>\n",
            "signature": "def findContentChildren(self, g: List[int], s: List[int]) -> int:\n    ",
            "test_cases": [
                "findContentChildren([1, 2, 3], [1, 1])",
                "findContentChildren([1, 2], [1, 2, 3])",
                "findContentChildren([1, 2, 3], [3, 3, 3])",
                "findContentChildren([10, 9, 8, 7], [5, 6, 7, 8])",
                "findContentChildren([1, 2, 3, 4], [1, 2, 3, 4])",
                "findContentChildren([10, 20, 30], [100])",
                "findContentChildren([5, 10, 15], [1, 2, 3, 4, 5, 6])",
                "findContentChildren([8, 9], [7, 10])",
                "findContentChildren([], [1, 2, 3])",
                "findContentChildren([1, 2, 3], [])"
            ],
            "expected_outputs": [
                "1",
                "2",
                "3",
                "2",
                "4",
                "1",
                "1",
                "1",
                "0",
                "0"
            ],
            "compare_func": "result == int(expected)"
        },
        {
            "id": 49,
            "title": "Repeated Substring Pattern",
            "description": "<p>Given a string <code>s</code>, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abab&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> It is the substring &quot;ab&quot; twice.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aba&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcabcabcabc&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> It is the substring &quot;abc&quot; four times or the substring &quot;abcabc&quot; twice.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n</ul>\n",
            "signature": "def repeatedSubstringPattern(self, s: str) -> bool:\n    ",
            "test_cases": [
                "repeatedSubstringPattern('abab')",
                "repeatedSubstringPattern('aba')",
                "repeatedSubstringPattern('abcabcabcabc')",
                "repeatedSubstringPattern('aaaa')",
                "repeatedSubstringPattern('a')",
                "repeatedSubstringPattern('abcd')",
                "repeatedSubstringPattern('zzz')",
                "repeatedSubstringPattern('abacababacab')",
                "repeatedSubstringPattern('aabbaabbaabb')",
                "repeatedSubstringPattern('xyxyxyxy')"
            ],
            "expected_outputs": [
                "True",
                "False",
                "True",
                "True",
                "False",
                "False",
                "True",
                "True",
                "True",
                "True"
            ],
            "compare_func": "result == eval(expected)"
        }
    ]
}